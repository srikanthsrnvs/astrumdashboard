import _extends from "@babel/runtime/helpers/extends";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import React, { PureComponent } from 'react';
import { PrismAsyncLight as SyntaxHighlighter } from 'react-syntax-highlighter';
import { applyTheme } from '../utils/themeBuilder';

var Code =
/*#__PURE__*/
function (_PureComponent) {
  _inherits(Code, _PureComponent);

  function Code() {
    _classCallCheck(this, Code);

    return _possibleConstructorReturn(this, _getPrototypeOf(Code).apply(this, arguments));
  }

  _createClass(Code, [{
    key: "getLineOpacity",
    value: function getLineOpacity(lineNumber) {
      if (!this.props.highlight) {
        return 1;
      }

      var highlight = this.props.highlight.split(',').map(function (num) {
        if (num.indexOf('-') > 0) {
          // We found a line group, e.g. 1-3
          var _num$split$map$sort = num.split('-').map(Number).sort(),
              _num$split$map$sort2 = _slicedToArray(_num$split$map$sort, 2),
              from = _num$split$map$sort2[0],
              to = _num$split$map$sort2[1];

          return Array(to + 1).fill(undefined).map(function (_, index) {
            return index;
          }).slice(from, to + 1);
        }

        return Number(num);
      }).reduce(function (acc, val) {
        return acc.concat(val);
      }, []);

      if (highlight.length === 0) {
        return 1;
      }

      if (highlight.includes(lineNumber)) {
        return 1;
      }

      return 0.3;
    }
  }, {
    key: "render",
    value: function render() {
      var _this = this;

      var _applyTheme = applyTheme(this.props.theme),
          inlineCodeStyle = _applyTheme.inlineCodeStyle;

      var language = this.props.language;
      var props = {
        language: language,
        PreTag: this.props.preTag,
        style: this.props.codeStyle || inlineCodeStyle,
        showLineNumbers: this.props.showLineNumbers,
        lineNumberContainerStyle: this.props.lineNumberContainerStyle,
        codeTagProps: this.props.codeTagProps
      };
      return React.createElement(SyntaxHighlighter, _extends({}, props, {
        // Wrap lines is needed to set styles on the line.
        // We use this to set opacity if highlight specific lines.
        wrapLines: this.props.highlight.length > 0,
        lineNumberStyle: function lineNumberStyle(lineNumber) {
          return {
            opacity: _this.getLineOpacity(lineNumber)
          };
        } // Types are incorrect.
        // @ts-ignore
        ,
        lineProps: function lineProps(lineNumber) {
          return {
            style: {
              opacity: _this.getLineOpacity(lineNumber)
            }
          };
        }
      }), this.props.text);
    }
  }]);

  return Code;
}(PureComponent);

_defineProperty(Code, "defaultProps", {
  theme: {},
  showLineNumbers: false,
  lineNumberContainerStyle: {},
  codeTagProps: {},
  preTag: 'span',
  highlight: ''
});

export { Code as default };