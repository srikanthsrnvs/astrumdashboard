{"ast":null,"code":"var _jsxFileName = \"/home/srikanth/Documents/astrum_dashboard/src/components/objectDetectionBuilder.js\";\nimport React, { useState } from 'react';\nimport { Typography, ThemeProvider, TextField, CircularProgress, Snackbar, SnackbarContent, makeStyles } from '@material-ui/core';\nimport FileDropper from './fileDropper';\nimport Button from '@material-ui/core/Button';\nimport { Link } from 'react-router-dom';\nimport TreeView from '@material-ui/lab/TreeView';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport TreeItem from '@material-ui/lab/TreeItem';\nconst styles = {\n  buildButton: {\n    marginTop: '40px'\n  },\n  projectName: {\n    marginTop: '40px'\n  }\n};\nconst useStyles = makeStyles(theme => ({\n  root: {\n    height: 'auto',\n    flexGrow: 1,\n    marginTop: 20,\n    marginBottom: 20\n  }\n}));\nexport default function ObjectDetectionBuilder(props) {\n  const [file, setFile] = useState({});\n  const user = props.user;\n  const [jobName, setJobName] = useState(\"\");\n  const [jobID, setJobID] = useState(\"\");\n  const [loading, isLoading] = useState(false);\n  const baseURL = 'https://astrumdashboard.appspot.com/';\n  const classes = useStyles();\n\n  function upload_dataset() {\n    var xhr = new XMLHttpRequest();\n    xhr.open('POST', baseURL + 'datasets');\n    xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n    var post_body = {\n      \"type\": \"object_detection\",\n      \"uploaded_by\": user.uid,\n      \"file\": file\n    };\n    xhr.send(JSON.stringify(post_body));\n    xhr.addEventListener('load', () => {\n      if (xhr.status === 200) {\n        const datasetID = JSON.parse(xhr.response).dataset_id;\n        beginTraining(datasetID);\n      }\n    });\n  }\n\n  function beginTraining(dID) {\n    var xhr = new XMLHttpRequest();\n    xhr.open('POST', baseURL + 'jobs');\n    xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n    var post_body = {\n      \"type\": \"object_detection\",\n      \"dataset\": dID,\n      \"created_by\": user.uid,\n      \"created_at\": Math.floor(new Date() / 1000),\n      'name': jobName\n    };\n    xhr.send(JSON.stringify(post_body));\n    xhr.addEventListener('load', () => {\n      if (xhr.status === 200) {\n        const jobID = JSON.parse(xhr.response).job_id;\n        console.log(\"Recieved jobID \" + jobID);\n        isLoading(false);\n        setJobID(jobID);\n      }\n    });\n  }\n\n  const ShowExampleTree = () => {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, React.createElement(TreeView, {\n      className: classes.root,\n      defaultCollapseIcon: React.createElement(ExpandMoreIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }),\n      defaultExpandIcon: React.createElement(ChevronRightIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, React.createElement(TreeItem, {\n      nodeId: \"0\",\n      label: \"data.zip\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(TreeItem, {\n      nodeId: \"1\",\n      label: \"images\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(TreeItem, {\n      nodeId: \"2\",\n      label: \"01.jpg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }), React.createElement(TreeItem, {\n      nodeId: \"3\",\n      label: \"02.jpg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }), React.createElement(TreeItem, {\n      nodeId: \"4\",\n      label: \"03.jpg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    })), React.createElement(TreeItem, {\n      nodeId: \"5\",\n      label: \"data.csv\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }))));\n  };\n\n  function build_classifer() {\n    isLoading(true);\n    upload_dataset();\n  }\n\n  const ShowSpinner = () => {\n    if (loading) {\n      return React.createElement(CircularProgress, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      });\n    } else {\n      return null;\n    }\n  };\n\n  const SnackbarAction = React.createElement(Link, {\n    to: \"/dashboard/all_projects\",\n    style: {\n      'textDecoration': 'none',\n      color: '#FFF'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }, React.createElement(Button, {\n    color: \"primary\",\n    variant: \"contained\",\n    size: \"small\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }, \"Track Job\"));\n  return React.createElement(\"div\", {\n    style: {\n      marginTop: 20\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }, \"Object Detection\"), React.createElement(Typography, {\n    variant: \"body2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }, \"First we'll need to upload data. In the box below, you can upload your data\"), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }), React.createElement(Typography, {\n    variant: \"body2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }, \"Your data needs to follow the following format;\"), React.createElement(ShowExampleTree, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }), React.createElement(Typography, {\n    variant: \"body2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }, \"The images folder will need to contain all your images, and the CSV file will need to contain data about your images. Please download the example CSV above to see exactly how your data needs to be format.\"), React.createElement(FileDropper, {\n    setFile: setFile,\n    allowedTypes: \".zip\",\n    firebase: props.firebase,\n    user: props.user,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }), React.createElement(\"form\", {\n    style: styles.projectName,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }, \"Give your project a name\"), React.createElement(TextField, {\n    onChange: e => setJobName(e.target.value),\n    id: \"jobName\",\n    label: \"Project Name\",\n    variant: \"outlined\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  })), React.createElement(Button, {\n    style: styles.buildButton,\n    variant: \"outlined\",\n    color: \"primary\",\n    disabled: file.name == \"\" || jobID !== \"\" || jobName === \"\" || loading,\n    onClick: build_classifer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  }, \"Build Predictor\"), React.createElement(ShowSpinner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }), React.createElement(Snackbar, {\n    open: jobID !== \"\",\n    autoHideDuration: 6000,\n    anchorOrigin: {\n      'horizontal': \"right\",\n      'vertical': \"bottom\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  }, React.createElement(SnackbarContent, {\n    action: SnackbarAction,\n    message: \"Sit tight, we're training a neural network for you ;)\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  })));\n}","map":{"version":3,"sources":["/home/srikanth/Documents/astrum_dashboard/src/components/objectDetectionBuilder.js"],"names":["React","useState","Typography","ThemeProvider","TextField","CircularProgress","Snackbar","SnackbarContent","makeStyles","FileDropper","Button","Link","TreeView","ExpandMoreIcon","ChevronRightIcon","TreeItem","styles","buildButton","marginTop","projectName","useStyles","theme","root","height","flexGrow","marginBottom","ObjectDetectionBuilder","props","file","setFile","user","jobName","setJobName","jobID","setJobID","loading","isLoading","baseURL","classes","upload_dataset","xhr","XMLHttpRequest","open","setRequestHeader","post_body","uid","send","JSON","stringify","addEventListener","status","datasetID","parse","response","dataset_id","beginTraining","dID","Math","floor","Date","job_id","console","log","ShowExampleTree","build_classifer","ShowSpinner","SnackbarAction","color","firebase","e","target","value","name"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { Typography, ThemeProvider, TextField, CircularProgress, Snackbar, SnackbarContent, makeStyles } from '@material-ui/core'\nimport FileDropper from './fileDropper'\nimport Button from '@material-ui/core/Button'\nimport { Link } from 'react-router-dom'\nimport TreeView from '@material-ui/lab/TreeView';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport TreeItem from '@material-ui/lab/TreeItem';\n\nconst styles = {\n    buildButton: {\n        marginTop: '40px'\n    },\n    projectName: {\n        marginTop: '40px'\n    }\n}\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        height: 'auto',\n        flexGrow: 1,\n        marginTop: 20,\n        marginBottom: 20,\n    },\n}));\n\nexport default function ObjectDetectionBuilder(props) {\n\n    const [file, setFile] = useState({})\n    const user = props.user;\n    const [jobName, setJobName] = useState(\"\")\n    const [jobID, setJobID] = useState(\"\")\n    const [loading, isLoading] = useState(false)\n    const baseURL = 'https://astrumdashboard.appspot.com/'\n    const classes = useStyles();\n\n\n    function upload_dataset() {\n        var xhr = new XMLHttpRequest()\n        xhr.open('POST', baseURL + 'datasets')\n        xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n\n        var post_body = {\n            \"type\": \"object_detection\",\n            \"uploaded_by\": user.uid,\n            \"file\": file\n        }\n        xhr.send(JSON.stringify(\n            post_body\n        ))\n        xhr.addEventListener('load', () => {\n            if (xhr.status === 200) {\n                const datasetID = JSON.parse(xhr.response).dataset_id\n                beginTraining(datasetID)\n            }\n        })\n    }\n\n    function beginTraining(dID) {\n        var xhr = new XMLHttpRequest()\n        xhr.open('POST', baseURL + 'jobs')\n        xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n\n        var post_body = {\n            \"type\": \"object_detection\",\n            \"dataset\": dID,\n            \"created_by\": user.uid,\n            \"created_at\": Math.floor(new Date() / 1000),\n            'name': jobName\n        }\n\n        xhr.send(JSON.stringify(\n            post_body\n        ))\n        xhr.addEventListener('load', () => {\n            if (xhr.status === 200) {\n                const jobID = JSON.parse(xhr.response).job_id\n                console.log(\"Recieved jobID \" + jobID)\n                isLoading(false)\n                setJobID(jobID)\n            }\n        })\n    }\n\n    const ShowExampleTree = () => {\n        return (\n            <div>\n                <TreeView\n                    className={classes.root}\n                    defaultCollapseIcon={<ExpandMoreIcon />}\n                    defaultExpandIcon={<ChevronRightIcon />}\n                >   \n                    <TreeItem nodeId='0' label='data.zip'>\n                        <TreeItem nodeId=\"1\" label=\"images\">\n                            <TreeItem nodeId=\"2\" label=\"01.jpg\" />\n                            <TreeItem nodeId=\"3\" label=\"02.jpg\" />\n                            <TreeItem nodeId=\"4\" label=\"03.jpg\" />\n                        </TreeItem>\n                        <TreeItem nodeId=\"5\" label=\"data.csv\" />\n                    </TreeItem>\n                </TreeView>\n            </div>\n        )\n    }\n\n    function build_classifer() {\n        isLoading(true)\n        upload_dataset()\n    }\n\n    const ShowSpinner = () => {\n        if (loading) {\n            return (\n                <CircularProgress />\n            )\n        } else {\n            return (\n                null\n            )\n        }\n    }\n\n    const SnackbarAction = (\n        <Link to='/dashboard/all_projects' style={{ 'textDecoration': 'none', color: '#FFF' }}>\n            <Button color='primary' variant='contained' size='small'>\n                Track Job\n            </Button>\n        </Link>\n    )\n\n    return (\n        <div style={{ marginTop: 20 }}>\n            <h2>Object Detection</h2>\n            <Typography variant='body2'>First we'll need to upload data. In the box below, you can upload your data</Typography>\n            <br></br>\n            <Typography variant='body2'>Your data needs to follow the following format;</Typography>\n            <ShowExampleTree />\n            <Typography variant='body2'>The images folder will need to contain all your images, and the CSV file will need to contain data about your images. Please download the example CSV above to see exactly how your data needs to be format.</Typography>\n            <FileDropper setFile={setFile} allowedTypes='.zip' firebase={props.firebase} user={props.user}></FileDropper>\n            <form style={styles.projectName}>\n                <h2>Give your project a name</h2>\n                <TextField onChange={e => setJobName(e.target.value)} id='jobName' label='Project Name' variant='outlined' />\n            </form>\n            <Button style={styles.buildButton} variant='outlined' color='primary' disabled={file.name == \"\" || jobID !== \"\" || jobName === \"\" || loading} onClick={build_classifer}>Build Predictor</Button>\n            <ShowSpinner />\n            <Snackbar open={jobID !== \"\"} autoHideDuration={6000} anchorOrigin={{ 'horizontal': \"right\", 'vertical': \"bottom\" }}>\n                <SnackbarContent\n                    action={SnackbarAction}\n                    message={\"Sit tight, we're training a neural network for you ;)\"}\n                />\n            </Snackbar>\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}