{"ast":null,"code":"var _jsxFileName = \"/home/srikanth/Documents/astrum_dashboard/src/components/imageClassiferBuilder.js\";\nimport React, { useState } from 'react';\nimport { Typography, ThemeProvider, TextField, CircularProgress, Snackbar, SnackbarContent, Link } from '@material-ui/core';\nimport FileDropper from './fileDropper';\nimport Button from '@material-ui/core/Button';\nimport Alert from '@material-ui/lab/Alert';\nconst styles = {\n  buildButton: {\n    marginTop: '40px'\n  },\n  projectName: {\n    marginTop: '40px'\n  }\n};\nexport default function ImageClassiferBuilder(props) {\n  const [files, setFiles] = useState([]);\n  const user = props.user;\n  const [datasetID, setDatasetID] = useState(\"\");\n  const [jobName, setJobName] = useState(\"\");\n  const [jobID, setJobID] = useState(\"\");\n  const [loading, isLoading] = useState(false);\n  const baseURL = 'https://astrumdashboard.appspot.com/';\n\n  function upload_dataset() {\n    var xhr = new XMLHttpRequest();\n    xhr.open('POST', baseURL + 'datasets');\n    xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n    var post_body = {\n      \"type\": \"image_classification\",\n      \"uploaded_by\": user.uid\n    };\n    post_body[\"child_datasets\"] = files;\n    xhr.send(JSON.stringify(post_body));\n    xhr.addEventListener('load', () => {\n      if (xhr.status === 200) {\n        const datasetID = JSON.parse(xhr.response).dataset_id;\n        setDatasetID(datasetID);\n        beginTraining(datasetID);\n      }\n    });\n  }\n\n  function beginTraining(dID) {\n    var xhr = new XMLHttpRequest();\n    xhr.open('POST', baseURL + 'jobs');\n    xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n    var post_body = {\n      \"type\": \"image_classification\",\n      \"dataset\": dID,\n      \"created_by\": user.uid,\n      \"created_at\": Math.floor(new Date() / 1000),\n      'name': jobName\n    };\n    xhr.send(JSON.stringify(post_body));\n    xhr.addEventListener('load', () => {\n      if (xhr.status === 200) {\n        const jobID = JSON.parse(xhr.response).job_id;\n        console.log(\"Recieved jobID \" + jobID);\n        setJobID(jobID);\n        isLoading(false);\n      }\n    });\n  }\n\n  function build_classifer() {\n    isLoading(true);\n    upload_dataset();\n  }\n\n  const ShowSpinner = () => {\n    if (loading) {\n      return React.createElement(CircularProgress, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      });\n    } else {\n      return null;\n    }\n  };\n\n  const SnackbarAction = React.createElement(Link, {\n    to: \"/dashboard/all_projects\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, \"TRACK JOB\");\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, \"First we'll need to upload data. In the box below, drop folders containing your image classes\"), React.createElement(Typography, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, \"You'll need to organize your images into folders to make sure that the algorithm learns correctly. For instance, if you want to classify dogs vs. cats, you'll need to create two folders. One containing dog images, and another containing cat images.\"), React.createElement(FileDropper, {\n    setFilesAction: setFiles,\n    firebase: props.firebase,\n    user: props.user,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }), React.createElement(\"form\", {\n    style: styles.projectName,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, \"Give your project a name\"), React.createElement(TextField, {\n    onChange: e => setJobName(e.target.value),\n    id: \"jobName\",\n    label: \"Project Name\",\n    variant: \"outlined\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  })), React.createElement(Button, {\n    style: styles.buildButton,\n    variant: \"outlined\",\n    color: \"primary\",\n    disabled: Object.keys(files).length < 2 || jobID !== \"\" || jobName == \"\" || loading,\n    onClick: build_classifer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, \"Build Predictor\"), React.createElement(ShowSpinner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }), React.createElement(Snackbar, {\n    open: jobID !== \"\",\n    autoHideDuration: 6000,\n    anchorOrigin: {\n      'horizontal': \"right\",\n      'vertical': \"bottom\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, React.createElement(SnackbarContent, {\n    action: SnackbarAction,\n    message: \"Sit tight, we're training a neural network for you ;)\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  })));\n}","map":{"version":3,"sources":["/home/srikanth/Documents/astrum_dashboard/src/components/imageClassiferBuilder.js"],"names":["React","useState","Typography","ThemeProvider","TextField","CircularProgress","Snackbar","SnackbarContent","Link","FileDropper","Button","Alert","styles","buildButton","marginTop","projectName","ImageClassiferBuilder","props","files","setFiles","user","datasetID","setDatasetID","jobName","setJobName","jobID","setJobID","loading","isLoading","baseURL","upload_dataset","xhr","XMLHttpRequest","open","setRequestHeader","post_body","uid","send","JSON","stringify","addEventListener","status","parse","response","dataset_id","beginTraining","dID","Math","floor","Date","job_id","console","log","build_classifer","ShowSpinner","SnackbarAction","firebase","e","target","value","Object","keys","length"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { Typography, ThemeProvider, TextField, CircularProgress, Snackbar, SnackbarContent, Link } from '@material-ui/core'\nimport FileDropper from './fileDropper'\nimport Button from '@material-ui/core/Button'\nimport Alert from '@material-ui/lab/Alert'\n\n\nconst styles = {\n    buildButton: {\n        marginTop: '40px'\n    },\n    projectName: {\n        marginTop: '40px'\n    }\n}\n\nexport default function ImageClassiferBuilder(props) {\n\n    const [files, setFiles] = useState([])\n    const user = props.user;\n    const [datasetID, setDatasetID] = useState(\"\")\n    const [jobName, setJobName] = useState(\"\")\n    const [jobID, setJobID] = useState(\"\")\n    const [loading, isLoading] = useState(false)\n    const baseURL = 'https://astrumdashboard.appspot.com/'\n\n    function upload_dataset() {\n        var xhr = new XMLHttpRequest()\n        xhr.open('POST', baseURL + 'datasets')\n        xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n\n        var post_body = {\n            \"type\": \"image_classification\",\n            \"uploaded_by\": user.uid\n        }\n        post_body[\"child_datasets\"] = files\n        xhr.send(JSON.stringify(\n            post_body\n        ))\n        xhr.addEventListener('load', () => {\n            if (xhr.status === 200) {\n                const datasetID = JSON.parse(xhr.response).dataset_id\n                setDatasetID(datasetID)\n                beginTraining(datasetID)\n            }\n        })\n    }\n\n    function beginTraining(dID) {\n        var xhr = new XMLHttpRequest()\n        xhr.open('POST', baseURL + 'jobs')\n        xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n\n        var post_body = {\n            \"type\": \"image_classification\",\n            \"dataset\": dID,\n            \"created_by\": user.uid,\n            \"created_at\": Math.floor(new Date() / 1000),\n            'name': jobName\n        }\n\n        xhr.send(JSON.stringify(\n            post_body\n        ))\n        xhr.addEventListener('load', () => {\n            if (xhr.status === 200) {\n                const jobID = JSON.parse(xhr.response).job_id\n                console.log(\"Recieved jobID \" + jobID)\n                setJobID(jobID)\n                isLoading(false)\n            }\n        })\n    }\n\n    function build_classifer() {\n        isLoading(true)\n        upload_dataset()\n    }\n\n    const ShowSpinner = () => {\n        if (loading) {\n            return (\n                <CircularProgress />\n            )\n        } else {\n            return (\n                null\n            )\n        }\n    }\n\n    const SnackbarAction = (\n        <Link to='/dashboard/all_projects'>\n            TRACK JOB\n        </Link>\n      );\n\n    return (\n        <div>\n            <Typography>First we'll need to upload data. In the box below, drop folders containing your image classes</Typography>\n            <Typography>You'll need to organize your images into folders to make sure that the algorithm learns correctly. For instance, if you want to classify dogs vs. cats, you'll need to create two folders. One containing dog images, and another containing cat images.</Typography>\n            <FileDropper setFilesAction={setFiles} firebase={props.firebase} user={props.user}></FileDropper>\n            <form style={styles.projectName}>\n                <h2>Give your project a name</h2>\n                <TextField onChange={e => setJobName(e.target.value)} id='jobName' label='Project Name' variant='outlined' />\n            </form>\n            <Button style={styles.buildButton} variant='outlined' color='primary' disabled={Object.keys(files).length < 2 || jobID !== \"\" || jobName == \"\" || loading} onClick={build_classifer}>Build Predictor</Button>\n            <ShowSpinner />\n            <Snackbar open={jobID !== \"\"} autoHideDuration={6000} anchorOrigin={{'horizontal': \"right\", 'vertical': \"bottom\"}}>\n                <SnackbarContent\n                    action={SnackbarAction}\n                    message={\"Sit tight, we're training a neural network for you ;)\"}\n                />\n            </Snackbar>\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}