{"ast":null,"code":"var _jsxFileName = \"/home/srikanth/Documents/astrum_dashboard/src/components/fileDropper.js\";\nimport React, { useMemo, useCallback, useReducer, useState } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport Chip from '@material-ui/core/Chip';\nimport { CircularProgress, Button, Snackbar, SnackbarContent } from '@material-ui/core';\nconst baseStyle = {\n  flex: 1,\n  display: 'flex',\n  flexDirection: 'column',\n  alignItems: 'center',\n  padding: '20px',\n  borderWidth: 2,\n  borderRadius: 2,\n  borderColor: '#eeeeee',\n  borderStyle: 'dashed',\n  backgroundColor: '#fafafa',\n  color: '#bdbdbd',\n  outline: 'none',\n  transition: 'border .24s ease-in-out',\n  marginTop: 20\n};\nconst activeStyle = {\n  borderColor: '#2196f3'\n};\nconst chipStyle = {\n  marginTop: '10px',\n  marginRight: '5px'\n};\nconst acceptStyle = {\n  borderColor: '#00e676'\n};\nconst rejectStyle = {\n  borderColor: '#ff1744'\n};\nexport default function FileDropper(props) {\n  const firebase = props.firebase;\n  const user = props.user;\n  const [showLoader, setShowLoader] = useState(false);\n  const allowedTypes = props.allowedTypes;\n  const maxSize = 20 * 1048576;\n  const [isFileTooLarge, setFileTooLarge] = useState(false);\n  const [file, setFile] = useState({\n    name: \"\",\n    metadata: \"\",\n    link: \"\"\n  });\n  const onDrop = useCallback(acceptedFiles => {\n    acceptedFiles.forEach(file => {\n      setShowLoader(true);\n      const reader = new FileReader();\n\n      reader.onabort = () => console.log('file reading was aborted');\n\n      reader.onerror = () => console.log('file reading has failed');\n\n      reader.onload = () => {\n        // Do whatever you want with the file contents\n        const binaryStr = reader.result;\n        console.log(binaryStr);\n      };\n\n      reader.readAsArrayBuffer(file);\n      firebase.upload_file(file, user).then(function (snapshot) {\n        snapshot.ref.getDownloadURL().then(function (url) {\n          var fileName = file.name;\n          setFile({ ...file,\n            name: fileName,\n            metadata: snapshot.metadata,\n            link: url\n          });\n          setShowLoader(false);\n        });\n      });\n    });\n  }, []);\n  const {\n    getRootProps,\n    getInputProps,\n    isDragActive,\n    isDragAccept,\n    isDragReject\n  } = useDropzone({\n    accept: allowedTypes,\n    onDrop,\n    maxSize: {\n      maxSize\n    }\n  });\n\n  const FileChips = () => {\n    props.setFile(file);\n\n    if (file.name !== \"\") {\n      return React.createElement(Chip, {\n        variant: \"default\",\n        onDelete: console.log(\"Delete pressed\"),\n        style: chipStyle,\n        key: file.name,\n        label: file.name.split('.').slice(0, -1).join('.'),\n        color: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      });\n    } else {\n      return null;\n    }\n  };\n\n  function connectToDropbox() {\n    var script = document.createElement('script');\n    script.setAttribute('data-app-key', 'z5p9y3pr6ufqsbh');\n    script.src = \"https://www.dropbox.com/static/api/2/dropins.js\";\n    script.id = \"dropboxjs\";\n    script.type = \"text/javascript\";\n    document.head.appendChild(script);\n    console.log(\"clicked\");\n    var options = {\n      // Required. Called when a user selects an item in the Chooser.\n      success: function (file) {\n        var filename = file[0].name;\n        var link = file[0].link;\n        var metadata = {};\n        setFile({ ...file,\n          name: filename,\n          link: link,\n          metadata: metadata\n        });\n      },\n      cancel: function () {},\n      linkType: \"direct\",\n      // or \"direct\"\n      multiselect: false,\n      // or true\n      folderselect: false,\n      // or true\n      extensions: ['.zip']\n    };\n\n    script.onerror = function () {\n      console.log(\"Err\");\n    };\n\n    script.onload = function () {\n      window.Dropbox.choose(options);\n    };\n\n    if (window.Dropbox) {\n      console.log(\"Trying to open picker\");\n      window.Dropbox.choose(options);\n    }\n  }\n\n  const ShowLoader = () => {\n    return showLoader ? React.createElement(CircularProgress, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }) : null;\n  };\n\n  const style = useMemo(() => ({ ...baseStyle,\n    ...(isDragActive ? activeStyle : {}),\n    ...(isDragAccept ? acceptStyle : {}),\n    ...(isDragReject ? rejectStyle : {})\n  }), [isDragActive, isDragReject]);\n  return React.createElement(\"div\", {\n    className: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }, React.createElement(\"div\", Object.assign({}, getRootProps({\n    style\n  }), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  }), React.createElement(\"input\", Object.assign({}, getInputProps(), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  })), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  }, \"Drop your .zip file here or click to select a file to upload\"), React.createElement(ShowLoader, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    style: {\n      marginTop: 40\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158\n    },\n    __self: this\n  }, React.createElement(\"h4\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159\n    },\n    __self: this\n  }, \"If your file is larger than 100mb, upload it from Dropbox instead\"), React.createElement(Button, {\n    color: \"primary\",\n    variant: \"contained\",\n    onClick: connectToDropbox,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160\n    },\n    __self: this\n  }, \"Connect to dropbox\")), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164\n    },\n    __self: this\n  }, React.createElement(FileChips, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165\n    },\n    __self: this\n  })), React.createElement(Snackbar, {\n    open: isFileTooLarge,\n    autoHideDuration: 6000,\n    anchorOrigin: {\n      'horizontal': \"right\",\n      'vertical': \"bottom\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167\n    },\n    __self: this\n  }, React.createElement(SnackbarContent, {\n    message: \"Your file is too large. Please use Dropbox instead\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168\n    },\n    __self: this\n  })));\n}","map":{"version":3,"sources":["/home/srikanth/Documents/astrum_dashboard/src/components/fileDropper.js"],"names":["React","useMemo","useCallback","useReducer","useState","useDropzone","Chip","CircularProgress","Button","Snackbar","SnackbarContent","baseStyle","flex","display","flexDirection","alignItems","padding","borderWidth","borderRadius","borderColor","borderStyle","backgroundColor","color","outline","transition","marginTop","activeStyle","chipStyle","marginRight","acceptStyle","rejectStyle","FileDropper","props","firebase","user","showLoader","setShowLoader","allowedTypes","maxSize","isFileTooLarge","setFileTooLarge","file","setFile","name","metadata","link","onDrop","acceptedFiles","forEach","reader","FileReader","onabort","console","log","onerror","onload","binaryStr","result","readAsArrayBuffer","upload_file","then","snapshot","ref","getDownloadURL","url","fileName","getRootProps","getInputProps","isDragActive","isDragAccept","isDragReject","accept","FileChips","split","slice","join","connectToDropbox","script","document","createElement","setAttribute","src","id","type","head","appendChild","options","success","filename","cancel","linkType","multiselect","folderselect","extensions","window","Dropbox","choose","ShowLoader","style"],"mappings":"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","sourcesContent":["import React, {useMemo, useCallback, useReducer, useState} from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport Chip from '@material-ui/core/Chip'\nimport { CircularProgress, Button, Snackbar, SnackbarContent } from '@material-ui/core';\n\nconst baseStyle = {\n    flex: 1,\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    padding: '20px',\n    borderWidth: 2,\n    borderRadius: 2,\n    borderColor: '#eeeeee',\n    borderStyle: 'dashed',\n    backgroundColor: '#fafafa',\n    color: '#bdbdbd',\n    outline: 'none',\n    transition: 'border .24s ease-in-out',\n    marginTop: 20\n};\n\nconst activeStyle = {\n    borderColor: '#2196f3'\n};\n\nconst chipStyle = {\n    marginTop: '10px',\n    marginRight: '5px'\n}\n\nconst acceptStyle = {\n    borderColor: '#00e676'\n};\n\nconst rejectStyle = {\n    borderColor: '#ff1744'\n};\n\nexport default function FileDropper(props) {\n\n    const firebase = props.firebase;\n    const user = props.user;\n    const [showLoader, setShowLoader] = useState(false)\n    const allowedTypes = props.allowedTypes\n    const maxSize = 20*1048576\n    const [isFileTooLarge, setFileTooLarge] = useState(false)\n    const [file, setFile] = useState({\n        name: \"\",\n        metadata: \"\",\n        link: \"\"\n    })\n\n    const onDrop = useCallback((acceptedFiles) => {\n        acceptedFiles.forEach((file) => {\n            \n            setShowLoader(true)\n            const reader = new FileReader()\n            reader.onabort = () => console.log('file reading was aborted')\n            reader.onerror = () => console.log('file reading has failed')\n            reader.onload = () => {\n                // Do whatever you want with the file contents\n                const binaryStr = reader.result\n                console.log(binaryStr)\n            }\n            reader.readAsArrayBuffer(file)\n            firebase.upload_file(file, user).then(function(snapshot){\n                snapshot.ref.getDownloadURL().then(function(url){\n                    var fileName = file.name\n                    setFile({...file, name: fileName, metadata: snapshot.metadata, link: url})\n                    setShowLoader(false)\n                })\n            })\n        })\n    }, [])\n\n    const {\n        getRootProps,\n        getInputProps,\n        isDragActive,\n        isDragAccept,\n        isDragReject,\n    } = useDropzone({accept: allowedTypes, onDrop, maxSize: {maxSize}});\n\n    const FileChips = () => {\n        props.setFile(file)\n        if (file.name !== \"\"){\n            return (\n                <Chip variant='default' onDelete={console.log(\"Delete pressed\")} style={chipStyle} key={file.name} label={file.name.split('.').slice(0, -1).join('.')} color='primary'></Chip>\n            )\n        }\n        else{\n            return (null)\n        }\n    }\n\n    function connectToDropbox(){\n\n        var script = document.createElement('script')\n        script.setAttribute('data-app-key', 'z5p9y3pr6ufqsbh')\n        script.src = \"https://www.dropbox.com/static/api/2/dropins.js\"\n        script.id = \"dropboxjs\"\n        script.type = \"text/javascript\"\n        document.head.appendChild(script);\n\n        console.log(\"clicked\")\n        var options = {\n\n            // Required. Called when a user selects an item in the Chooser.\n            success: function(file) {\n                var filename = file[0].name\n                var link = file[0].link\n                var metadata = {}\n                setFile({...file, name: filename, link: link, metadata: metadata})\n            },\n            cancel: function() {\n                \n            },\n            linkType: \"direct\", // or \"direct\"\n            multiselect: false, // or true\n            folderselect: false, // or true\n            extensions: ['.zip']\n        };\n        script.onerror = function(){\n            console.log(\"Err\")\n        }\n        script.onload = function(){\n            window.Dropbox.choose(options)\n        }\n        if (window.Dropbox){\n            console.log(\"Trying to open picker\")\n            window.Dropbox.choose(options)\n        }\n        \n    }\n\n    const ShowLoader = () => {\n        return ( showLoader ? (<CircularProgress />) : (null) )\n    }\n\n    const style = useMemo(() => ({\n        ...baseStyle,\n        ...(isDragActive ? activeStyle : {}),\n        ...(isDragAccept ? acceptStyle : {}),\n        ...(isDragReject ? rejectStyle : {})\n    }), [\n        isDragActive,\n        isDragReject\n    ]);\n\n    return (\n        <div className=\"container\">\n            <div {...getRootProps({ style })}>\n                <input {...getInputProps()} />\n                <p>Drop your .zip file here or click to select a file to upload</p>\n                <ShowLoader />\n            </div>\n            <div style={{marginTop: 40}}>\n                <h4>If your file is larger than 100mb, upload it from Dropbox instead</h4>\n                <Button color='primary' variant='contained' onClick={connectToDropbox}>\n                    Connect to dropbox\n                </Button>\n            </div>\n            <div>\n                <FileChips />\n            </div>\n            <Snackbar open={isFileTooLarge} autoHideDuration={6000} anchorOrigin={{ 'horizontal': \"right\", 'vertical': \"bottom\" }}>\n                <SnackbarContent\n                    message={\"Your file is too large. Please use Dropbox instead\"}\n                />\n            </Snackbar>\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}