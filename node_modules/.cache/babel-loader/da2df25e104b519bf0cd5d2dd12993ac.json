{"ast":null,"code":"var _jsxFileName = \"/home/srikanth/Documents/astrum_dashboard/src/components/taskTypePicker.js\";\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport TaskTypeCard from './taskTypeCard';\nimport predictor from '../images/2.png';\nimport img_classifier from '../images/1.png';\nimport classifier from '../images/3.png';\nimport custom from '../images/4.png';\nimport puppy from '../images/puppy.jpg';\nimport dog_and_cat from '../';\nimport { Typography, Divider } from '@material-ui/core';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1\n  },\n  paper: {\n    height: 140,\n    width: 100\n  },\n  control: {\n    padding: theme.spacing(2)\n  }\n}));\nexport default function TaskTypePicker(props) {\n  const [spacing, setSpacing] = React.useState(2);\n  const classes = useStyles();\n  return React.createElement(Grid, {\n    container: true,\n    className: classes.root,\n    spacing: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    style: {\n      paddingTop: 50\n    },\n    variant: \"h4\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, \"Computer Vision\"), React.createElement(Grid, {\n    container: true,\n    justify: \"flex-start\",\n    style: {\n      paddingTop: 30,\n      paddingBottom: 50\n    },\n    spacing: spacing,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    key: \"image_classification\",\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, React.createElement(TaskTypeCard, {\n    onClick: props.onClick.bind(null, 1),\n    image: puppy,\n    title: \"Image Classification\",\n    text: \"Detect single objects in an image. For instance, this image would be classified as a Dog.\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  })), React.createElement(Grid, {\n    key: \"object_detection\",\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, React.createElement(TaskTypeCard, {\n    onClick: props.onClick.bind(null, 1),\n    image: img_classifier,\n    title: \"Object Detection\",\n    text: \"Detect multiple objects in a single image\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  })), React.createElement(Grid, {\n    key: \"image_segmentation\",\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, React.createElement(TaskTypeCard, {\n    onClick: props.onClick.bind(null, 1),\n    image: img_classifier,\n    title: \"Image Segmentation\",\n    text: \"Detect multiple objects in a single image, and draw bounding boxes around them\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }))), React.createElement(Divider, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }), React.createElement(Typography, {\n    style: {\n      paddingTop: 50\n    },\n    variant: \"h4\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, \"Tabular Data\"), React.createElement(Grid, {\n    container: true,\n    justify: \"flex-start\",\n    style: {\n      paddingTop: 50\n    },\n    spacing: spacing,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    key: \"structured_predictor\",\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, React.createElement(TaskTypeCard, {\n    onClick: props.onClick.bind(null, 2),\n    image: predictor,\n    title: \"Data prediction\",\n    text: \"Choose this option if the prediction target is continuous. For instance, predict revenue next month given a set of features in a CSV file.\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  })), React.createElement(Grid, {\n    key: \"structured_classifier\",\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, React.createElement(TaskTypeCard, {\n    onClick: props.onClick.bind(null, 3),\n    image: classifier,\n    title: \"Data classification\",\n    text: \"Choose this option if the prediction target is discrete. For instance, predict if a customer would default on a loan.\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  })), React.createElement(Grid, {\n    key: \"custom\",\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, React.createElement(TaskTypeCard, {\n    onClick: props.onClick.bind(null, 3),\n    image: custom,\n    title: \"Custom model\",\n    text: \"Choose this option if you want to build a custom deep learning model, tuned to your data. We'll find you the best possible model, billed at $4/hr to search for an architecture & train the model. (Recommended only for experts)\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  })))));\n}","map":{"version":3,"sources":["/home/srikanth/Documents/astrum_dashboard/src/components/taskTypePicker.js"],"names":["React","makeStyles","Grid","TaskTypeCard","predictor","img_classifier","classifier","custom","puppy","dog_and_cat","Typography","Divider","useStyles","theme","root","flexGrow","paper","height","width","control","padding","spacing","TaskTypePicker","props","setSpacing","useState","classes","paddingTop","paddingBottom","onClick","bind"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport TaskTypeCard from './taskTypeCard'\nimport predictor from '../images/2.png'\nimport img_classifier from '../images/1.png'\nimport classifier from '../images/3.png'\nimport custom from '../images/4.png'\nimport puppy from '../images/puppy.jpg'\nimport dog_and_cat from '../'\nimport { Typography, Divider } from '@material-ui/core';\n\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n    },\n    paper: {\n        height: 140,\n        width: 100,\n    },\n    control: {\n        padding: theme.spacing(2),\n    },\n}));\n\nexport default function TaskTypePicker(props) {\n    const [spacing, setSpacing] = React.useState(2);\n    const classes = useStyles();\n\n    return (\n        <Grid container className={classes.root} spacing={2}>\n            <Grid item xs={12}>\n                <Typography style={{paddingTop: 50}} variant='h4'>Computer Vision</Typography>\n                <Grid container justify=\"flex-start\" style={{paddingTop: 30, paddingBottom: 50}} spacing={spacing}>\n                    <Grid key=\"image_classification\" item>\n                        <TaskTypeCard\n                            onClick={props.onClick.bind(null, 1)}\n                            image={puppy}\n                            title=\"Image Classification\" \n                            text=\"Detect single objects in an image. For instance, this image would be classified as a Dog.\" \n                        />\n                    </Grid>\n                    <Grid key=\"object_detection\" item>\n                        <TaskTypeCard\n                            onClick={props.onClick.bind(null, 1)}\n                            image={img_classifier}\n                            title=\"Object Detection\" \n                            text=\"Detect multiple objects in a single image\" \n                        />\n                    </Grid>\n                    <Grid key=\"image_segmentation\" item>\n                        <TaskTypeCard\n                            onClick={props.onClick.bind(null, 1)}\n                            image={img_classifier}\n                            title=\"Image Segmentation\" \n                            text=\"Detect multiple objects in a single image, and draw bounding boxes around them\" \n                        />\n                    </Grid>\n                </Grid>\n                <Divider />\n                <Typography style={{paddingTop: 50}} variant='h4'>Tabular Data</Typography>\n                <Grid container justify=\"flex-start\" style={{paddingTop: 50}} spacing={spacing}>\n                    <Grid key=\"structured_predictor\" item>\n                        <TaskTypeCard \n                            onClick={props.onClick.bind(null, 2)}\n                            image={predictor}\n                            title=\"Data prediction\" \n                            text=\"Choose this option if the prediction target is continuous. For instance, predict revenue next month given a set of features in a CSV file.\" \n                        />\n                    </Grid>\n                    <Grid key=\"structured_classifier\" item>\n                        <TaskTypeCard \n                            onClick={props.onClick.bind(null, 3)}\n                            image={classifier}\n                            title=\"Data classification\" \n                            text=\"Choose this option if the prediction target is discrete. For instance, predict if a customer would default on a loan.\" \n                        />\n                    </Grid>\n                    <Grid key=\"custom\" item>\n                        <TaskTypeCard \n                            onClick={props.onClick.bind(null, 3)}\n                            image={custom}\n                            title=\"Custom model\" \n                            text=\"Choose this option if you want to build a custom deep learning model, tuned to your data. We'll find you the best possible model, billed at $4/hr to search for an architecture & train the model. (Recommended only for experts)\" \n                        />\n                    </Grid>\n                </Grid>\n            </Grid>\n        </Grid>\n    );\n}"]},"metadata":{},"sourceType":"module"}