{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport React, { PureComponent } from 'react';\nimport { PrismAsyncLight as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { applyTheme } from '../utils/themeBuilder';\n\nvar Code =\n/*#__PURE__*/\nfunction (_PureComponent) {\n  _inherits(Code, _PureComponent);\n\n  function Code() {\n    _classCallCheck(this, Code);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Code).apply(this, arguments));\n  }\n\n  _createClass(Code, [{\n    key: \"getLineOpacity\",\n    value: function getLineOpacity(lineNumber) {\n      if (!this.props.highlight) {\n        return 1;\n      }\n\n      var highlight = this.props.highlight.split(',').map(function (num) {\n        if (num.indexOf('-') > 0) {\n          // We found a line group, e.g. 1-3\n          var _num$split$map$sort = num.split('-').map(Number).sort(),\n              _num$split$map$sort2 = _slicedToArray(_num$split$map$sort, 2),\n              from = _num$split$map$sort2[0],\n              to = _num$split$map$sort2[1];\n\n          return Array(to + 1).fill(undefined).map(function (_, index) {\n            return index;\n          }).slice(from, to + 1);\n        }\n\n        return Number(num);\n      }).reduce(function (acc, val) {\n        return acc.concat(val);\n      }, []);\n\n      if (highlight.length === 0) {\n        return 1;\n      }\n\n      if (highlight.includes(lineNumber)) {\n        return 1;\n      }\n\n      return 0.3;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      var _applyTheme = applyTheme(this.props.theme),\n          inlineCodeStyle = _applyTheme.inlineCodeStyle;\n\n      var language = this.props.language;\n      var props = {\n        language: language,\n        PreTag: this.props.preTag,\n        style: this.props.codeStyle || inlineCodeStyle,\n        showLineNumbers: this.props.showLineNumbers,\n        lineNumberContainerStyle: this.props.lineNumberContainerStyle,\n        codeTagProps: this.props.codeTagProps\n      };\n      return React.createElement(SyntaxHighlighter, _extends({}, props, {\n        // Wrap lines is needed to set styles on the line.\n        // We use this to set opacity if highlight specific lines.\n        wrapLines: this.props.highlight.length > 0,\n        lineNumberStyle: function lineNumberStyle(lineNumber) {\n          return {\n            opacity: _this.getLineOpacity(lineNumber)\n          };\n        } // Types are incorrect.\n        // @ts-ignore\n        ,\n        lineProps: function lineProps(lineNumber) {\n          return {\n            style: {\n              opacity: _this.getLineOpacity(lineNumber)\n            }\n          };\n        }\n      }), this.props.text);\n    }\n  }]);\n\n  return Code;\n}(PureComponent);\n\n_defineProperty(Code, \"defaultProps\", {\n  theme: {},\n  showLineNumbers: false,\n  lineNumberContainerStyle: {},\n  codeTagProps: {},\n  preTag: 'span',\n  highlight: ''\n});\n\nexport { Code as default };","map":{"version":3,"sources":["/home/srikanth/Documents/astrum_dashboard/node_modules/react-code-blocks/build/esm/components/Code.js"],"names":["_extends","_slicedToArray","_classCallCheck","_createClass","_possibleConstructorReturn","_getPrototypeOf","_inherits","_defineProperty","React","PureComponent","PrismAsyncLight","SyntaxHighlighter","applyTheme","Code","_PureComponent","apply","arguments","key","value","getLineOpacity","lineNumber","props","highlight","split","map","num","indexOf","_num$split$map$sort","Number","sort","_num$split$map$sort2","from","to","Array","fill","undefined","_","index","slice","reduce","acc","val","concat","length","includes","render","_this","_applyTheme","theme","inlineCodeStyle","language","PreTag","preTag","style","codeStyle","showLineNumbers","lineNumberContainerStyle","codeTagProps","createElement","wrapLines","lineNumberStyle","opacity","lineProps","text","default"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport React, { PureComponent } from 'react';\nimport { PrismAsyncLight as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { applyTheme } from '../utils/themeBuilder';\n\nvar Code =\n/*#__PURE__*/\nfunction (_PureComponent) {\n  _inherits(Code, _PureComponent);\n\n  function Code() {\n    _classCallCheck(this, Code);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Code).apply(this, arguments));\n  }\n\n  _createClass(Code, [{\n    key: \"getLineOpacity\",\n    value: function getLineOpacity(lineNumber) {\n      if (!this.props.highlight) {\n        return 1;\n      }\n\n      var highlight = this.props.highlight.split(',').map(function (num) {\n        if (num.indexOf('-') > 0) {\n          // We found a line group, e.g. 1-3\n          var _num$split$map$sort = num.split('-').map(Number).sort(),\n              _num$split$map$sort2 = _slicedToArray(_num$split$map$sort, 2),\n              from = _num$split$map$sort2[0],\n              to = _num$split$map$sort2[1];\n\n          return Array(to + 1).fill(undefined).map(function (_, index) {\n            return index;\n          }).slice(from, to + 1);\n        }\n\n        return Number(num);\n      }).reduce(function (acc, val) {\n        return acc.concat(val);\n      }, []);\n\n      if (highlight.length === 0) {\n        return 1;\n      }\n\n      if (highlight.includes(lineNumber)) {\n        return 1;\n      }\n\n      return 0.3;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      var _applyTheme = applyTheme(this.props.theme),\n          inlineCodeStyle = _applyTheme.inlineCodeStyle;\n\n      var language = this.props.language;\n      var props = {\n        language: language,\n        PreTag: this.props.preTag,\n        style: this.props.codeStyle || inlineCodeStyle,\n        showLineNumbers: this.props.showLineNumbers,\n        lineNumberContainerStyle: this.props.lineNumberContainerStyle,\n        codeTagProps: this.props.codeTagProps\n      };\n      return React.createElement(SyntaxHighlighter, _extends({}, props, {\n        // Wrap lines is needed to set styles on the line.\n        // We use this to set opacity if highlight specific lines.\n        wrapLines: this.props.highlight.length > 0,\n        lineNumberStyle: function lineNumberStyle(lineNumber) {\n          return {\n            opacity: _this.getLineOpacity(lineNumber)\n          };\n        } // Types are incorrect.\n        // @ts-ignore\n        ,\n        lineProps: function lineProps(lineNumber) {\n          return {\n            style: {\n              opacity: _this.getLineOpacity(lineNumber)\n            }\n          };\n        }\n      }), this.props.text);\n    }\n  }]);\n\n  return Code;\n}(PureComponent);\n\n_defineProperty(Code, \"defaultProps\", {\n  theme: {},\n  showLineNumbers: false,\n  lineNumberContainerStyle: {},\n  codeTagProps: {},\n  preTag: 'span',\n  highlight: ''\n});\n\nexport { Code as default };"]},"metadata":{},"sourceType":"module"}