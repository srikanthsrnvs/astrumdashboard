{"ast":null,"code":"var _jsxFileName = \"/home/srikanth/Documents/astrum_dashboard/src/components/imageClassiferBuilder.js\";\nimport React, { useState } from 'react';\nimport { Typography, ThemeProvider, TextField, CircularProgress, Snackbar, SnackbarContent, makeStyles } from '@material-ui/core';\nimport FileDropper from './fileDropper';\nimport Button from '@material-ui/core/Button';\nimport { Link } from 'react-router-dom';\nimport TreeView from '@material-ui/lab/TreeView';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport TreeItem from '@material-ui/lab/TreeItem';\nconst styles = {\n  buildButton: {\n    marginTop: '40px'\n  },\n  projectName: {\n    marginTop: '40px'\n  }\n};\nconst useStyles = makeStyles({\n  root: {\n    height: 240,\n    flexGrow: 1,\n    maxWidth: 400,\n    marginTop: 20,\n    marginBottom: 20\n  }\n});\nexport default function ImageClassiferBuilder(props) {\n  const [files, setFiles] = useState([]);\n  const user = props.user;\n  const [jobName, setJobName] = useState(\"\");\n  const [jobID, setJobID] = useState(\"\");\n  const [loading, isLoading] = useState(false);\n  const baseURL = 'https://astrumdashboard.appspot.com/';\n  const classes = useStyles();\n\n  function upload_dataset() {\n    var xhr = new XMLHttpRequest();\n    xhr.open('POST', baseURL + 'datasets');\n    xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n    var post_body = {\n      \"type\": \"image_classification\",\n      \"uploaded_by\": user.uid\n    };\n    post_body[\"child_datasets\"] = files;\n    xhr.send(JSON.stringify(post_body));\n    xhr.addEventListener('load', () => {\n      if (xhr.status === 200) {\n        const datasetID = JSON.parse(xhr.response).dataset_id;\n        beginTraining(datasetID);\n      }\n    });\n  }\n\n  function beginTraining(dID) {\n    var xhr = new XMLHttpRequest();\n    xhr.open('POST', baseURL + 'jobs');\n    xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n    var post_body = {\n      \"type\": \"image_classification\",\n      \"dataset\": dID,\n      \"created_by\": user.uid,\n      \"created_at\": Math.floor(new Date() / 1000),\n      'name': jobName\n    };\n    xhr.send(JSON.stringify(post_body));\n    xhr.addEventListener('load', () => {\n      if (xhr.status === 200) {\n        const jobID = JSON.parse(xhr.response).job_id;\n        console.log(\"Recieved jobID \" + jobID);\n        isLoading(false);\n        setJobID(jobID);\n      }\n    });\n  }\n\n  const ShowExampleTree = () => {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, React.createElement(TreeView, {\n      className: classes.root,\n      defaultCollapseIcon: React.createElement(ExpandMoreIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }),\n      defaultExpandIcon: React.createElement(ChevronRightIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, React.createElement(TreeItem, {\n      nodeId: \"1\",\n      label: \"Dogs.zip\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(TreeItem, {\n      nodeId: \"2\",\n      label: \"dog1.jpg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }), React.createElement(TreeItem, {\n      nodeId: \"3\",\n      label: \"dog2.jpg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }), React.createElement(TreeItem, {\n      nodeId: \"4\",\n      label: \"dog3.jpg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    })), React.createElement(TreeItem, {\n      nodeId: \"5\",\n      label: \"Cats.zip\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(TreeItem, {\n      nodeId: \"6\",\n      label: \"cat1.jpg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }), React.createElement(TreeItem, {\n      nodeId: \"7\",\n      label: \"cat2.jpg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }), React.createElement(TreeItem, {\n      nodeId: \"8\",\n      label: \"cat3.jpg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    })), React.createElement(TreeItem, {\n      nodeId: \"9\",\n      label: \"Birds.zip\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, React.createElement(TreeItem, {\n      nodeId: \"10\",\n      label: \"bird1.jpg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }), React.createElement(TreeItem, {\n      nodeId: \"11\",\n      label: \"bird2.jpg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }), React.createElement(TreeItem, {\n      nodeId: \"12\",\n      label: \"bird3.jpg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }))));\n  };\n\n  function build_classifer() {\n    isLoading(true);\n    upload_dataset();\n  }\n\n  const ShowSpinner = () => {\n    if (loading) {\n      return React.createElement(CircularProgress, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      });\n    } else {\n      return null;\n    }\n  };\n\n  const SnackbarAction = React.createElement(Link, {\n    to: \"/dashboard/all_projects\",\n    style: {\n      'textDecoration': 'none',\n      color: '#FFF'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }, React.createElement(Button, {\n    color: \"primary\",\n    variant: \"contained\",\n    size: \"small\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }, \"Track Job\"));\n  return React.createElement(\"div\", {\n    style: {\n      marginTop: 20\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    variant: \"h6\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }, \"Let's get started\"), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }), React.createElement(Typography, {\n    variant: \"body2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }, \"First we'll need to upload data. In the box below, drop folders containing images of a particular class.\"), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  }), React.createElement(Typography, {\n    variant: \"body2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }, \"You'll need to organize your images into folders to make sure that the algorithm learns correctly. Here's a folder structure for a classifier that learns to classify Dogs, Cats, and Birds:\"), React.createElement(ShowExampleTree, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  }), React.createElement(FileDropper, {\n    setFilesAction: setFiles,\n    firebase: props.firebase,\n    user: props.user,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }), React.createElement(\"form\", {\n    style: styles.projectName,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  }, \"Give your project a name\"), React.createElement(TextField, {\n    onChange: e => setJobName(e.target.value),\n    id: \"jobName\",\n    label: \"Project Name\",\n    variant: \"outlined\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  })), React.createElement(Button, {\n    style: styles.buildButton,\n    variant: \"outlined\",\n    color: \"primary\",\n    disabled: Object.keys(files).length < 2 || jobID !== \"\" || jobName === \"\" || loading,\n    onClick: build_classifer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  }, \"Build Predictor\"), React.createElement(ShowSpinner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  }), React.createElement(Snackbar, {\n    open: jobID !== \"\",\n    autoHideDuration: 6000,\n    anchorOrigin: {\n      'horizontal': \"right\",\n      'vertical': \"bottom\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  }, React.createElement(SnackbarContent, {\n    action: SnackbarAction,\n    message: \"Sit tight, we're training a neural network for you ;)\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156\n    },\n    __self: this\n  })));\n}","map":{"version":3,"sources":["/home/srikanth/Documents/astrum_dashboard/src/components/imageClassiferBuilder.js"],"names":["React","useState","Typography","ThemeProvider","TextField","CircularProgress","Snackbar","SnackbarContent","makeStyles","FileDropper","Button","Link","TreeView","ExpandMoreIcon","ChevronRightIcon","TreeItem","styles","buildButton","marginTop","projectName","useStyles","root","height","flexGrow","maxWidth","marginBottom","ImageClassiferBuilder","props","files","setFiles","user","jobName","setJobName","jobID","setJobID","loading","isLoading","baseURL","classes","upload_dataset","xhr","XMLHttpRequest","open","setRequestHeader","post_body","uid","send","JSON","stringify","addEventListener","status","datasetID","parse","response","dataset_id","beginTraining","dID","Math","floor","Date","job_id","console","log","ShowExampleTree","build_classifer","ShowSpinner","SnackbarAction","color","firebase","e","target","value","Object","keys","length"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { Typography, ThemeProvider, TextField, CircularProgress, Snackbar, SnackbarContent, makeStyles } from '@material-ui/core'\nimport FileDropper from './fileDropper'\nimport Button from '@material-ui/core/Button'\nimport { Link } from 'react-router-dom'\nimport TreeView from '@material-ui/lab/TreeView';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport TreeItem from '@material-ui/lab/TreeItem';\n\nconst styles = {\n    buildButton: {\n        marginTop: '40px'\n    },\n    projectName: {\n        marginTop: '40px'\n    }\n}\nconst useStyles = makeStyles({\n    root: {\n        height: 240,\n        flexGrow: 1,\n        maxWidth: 400,\n        marginTop: 20,\n        marginBottom: 20\n    },\n});\n\nexport default function ImageClassiferBuilder(props) {\n\n    const [files, setFiles] = useState([])\n    const user = props.user;\n    const [jobName, setJobName] = useState(\"\")\n    const [jobID, setJobID] = useState(\"\")\n    const [loading, isLoading] = useState(false)\n    const baseURL = 'https://astrumdashboard.appspot.com/'\n    const classes = useStyles();\n\n\n    function upload_dataset() {\n        var xhr = new XMLHttpRequest()\n        xhr.open('POST', baseURL + 'datasets')\n        xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n\n        var post_body = {\n            \"type\": \"image_classification\",\n            \"uploaded_by\": user.uid\n        }\n        post_body[\"child_datasets\"] = files\n        xhr.send(JSON.stringify(\n            post_body\n        ))\n        xhr.addEventListener('load', () => {\n            if (xhr.status === 200) {\n                const datasetID = JSON.parse(xhr.response).dataset_id\n                beginTraining(datasetID)\n            }\n        })\n    }\n\n    function beginTraining(dID) {\n        var xhr = new XMLHttpRequest()\n        xhr.open('POST', baseURL + 'jobs')\n        xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n\n        var post_body = {\n            \"type\": \"image_classification\",\n            \"dataset\": dID,\n            \"created_by\": user.uid,\n            \"created_at\": Math.floor(new Date() / 1000),\n            'name': jobName\n        }\n\n        xhr.send(JSON.stringify(\n            post_body\n        ))\n        xhr.addEventListener('load', () => {\n            if (xhr.status === 200) {\n                const jobID = JSON.parse(xhr.response).job_id\n                console.log(\"Recieved jobID \" + jobID)\n                isLoading(false)\n                setJobID(jobID)\n            }\n        })\n    }\n\n    const ShowExampleTree = () => {\n        return (\n            <div>\n                <TreeView\n                    className={classes.root}\n                    defaultCollapseIcon={<ExpandMoreIcon />}\n                    defaultExpandIcon={<ChevronRightIcon />}\n                >\n                    <TreeItem nodeId=\"1\" label=\"Dogs.zip\">\n                        <TreeItem nodeId=\"2\" label=\"dog1.jpg\" />\n                        <TreeItem nodeId=\"3\" label=\"dog2.jpg\" />\n                        <TreeItem nodeId=\"4\" label=\"dog3.jpg\" />\n                    </TreeItem>\n                    <TreeItem nodeId=\"5\" label=\"Cats.zip\">\n                        <TreeItem nodeId=\"6\" label=\"cat1.jpg\" />\n                        <TreeItem nodeId=\"7\" label=\"cat2.jpg\" />\n                        <TreeItem nodeId=\"8\" label=\"cat3.jpg\" />\n                    </TreeItem>\n                    <TreeItem nodeId=\"9\" label=\"Birds.zip\">\n                        <TreeItem nodeId=\"10\" label=\"bird1.jpg\" />\n                        <TreeItem nodeId=\"11\" label=\"bird2.jpg\" />\n                        <TreeItem nodeId=\"12\" label=\"bird3.jpg\" />\n                    </TreeItem>\n                </TreeView>\n            </div>\n        )\n    }\n\n    function build_classifer() {\n        isLoading(true)\n        upload_dataset()\n    }\n\n    const ShowSpinner = () => {\n        if (loading) {\n            return (\n                <CircularProgress />\n            )\n        } else {\n            return (\n                null\n            )\n        }\n    }\n\n    const SnackbarAction = (\n        <Link to='/dashboard/all_projects' style={{ 'textDecoration': 'none', color: '#FFF' }}>\n            <Button color='primary' variant='contained' size='small'>\n                Track Job\n            </Button>\n        </Link>\n    )\n\n    return (\n        <div style={{ marginTop: 20 }}>\n            <Typography variant='h6'>Let's get started</Typography>\n            <br></br>\n            <Typography variant='body2'>First we'll need to upload data. In the box below, drop folders containing images of a particular class.</Typography>\n            <br></br>\n            <Typography variant='body2'>You'll need to organize your images into folders to make sure that the algorithm learns correctly. Here's a folder structure for a classifier that learns to classify Dogs, Cats, and Birds:</Typography>\n            <ShowExampleTree />\n            <FileDropper setFilesAction={setFiles} firebase={props.firebase} user={props.user}></FileDropper>\n            <form style={styles.projectName}>\n                <h2>Give your project a name</h2>\n                <TextField onChange={e => setJobName(e.target.value)} id='jobName' label='Project Name' variant='outlined' />\n            </form>\n            <Button style={styles.buildButton} variant='outlined' color='primary' disabled={Object.keys(files).length < 2 || jobID !== \"\" || jobName === \"\" || loading} onClick={build_classifer}>Build Predictor</Button>\n            <ShowSpinner />\n            <Snackbar open={jobID !== \"\"} autoHideDuration={6000} anchorOrigin={{ 'horizontal': \"right\", 'vertical': \"bottom\" }}>\n                <SnackbarContent\n                    action={SnackbarAction}\n                    message={\"Sit tight, we're training a neural network for you ;)\"}\n                />\n            </Snackbar>\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}