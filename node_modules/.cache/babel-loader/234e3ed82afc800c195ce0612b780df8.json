{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport React from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport TreeViewContext from './TreeViewContext';\nimport { withStyles } from '@material-ui/core/styles';\nimport { useControlled } from '@material-ui/core/utils';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    padding: 0,\n    margin: 0,\n    listStyle: 'none'\n  }\n};\n\nfunction arrayDiff(arr1, arr2) {\n  if (arr1.length !== arr2.length) return true;\n\n  for (var i = 0; i < arr1.length; i += 1) {\n    if (arr1[i] !== arr2[i]) return true;\n  }\n\n  return false;\n}\n\nvar defaultExpandedDefault = [];\nvar TreeView = React.forwardRef(function TreeView(props, ref) {\n  var children = props.children,\n      classes = props.classes,\n      className = props.className,\n      defaultCollapseIcon = props.defaultCollapseIcon,\n      defaultEndIcon = props.defaultEndIcon,\n      _props$defaultExpande = props.defaultExpanded,\n      defaultExpanded = _props$defaultExpande === void 0 ? defaultExpandedDefault : _props$defaultExpande,\n      defaultExpandIcon = props.defaultExpandIcon,\n      defaultParentIcon = props.defaultParentIcon,\n      expandedProp = props.expanded,\n      onNodeToggle = props.onNodeToggle,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"defaultCollapseIcon\", \"defaultEndIcon\", \"defaultExpanded\", \"defaultExpandIcon\", \"defaultParentIcon\", \"expanded\", \"onNodeToggle\"]);\n\n  var _React$useState = React.useState(null),\n      tabable = _React$useState[0],\n      setTabable = _React$useState[1];\n\n  var _React$useState2 = React.useState(null),\n      focused = _React$useState2[0],\n      setFocused = _React$useState2[1];\n\n  var firstNode = React.useRef(null);\n  var nodeMap = React.useRef({});\n  var firstCharMap = React.useRef({});\n\n  var _useControlled = useControlled({\n    controlled: expandedProp,\n    default: defaultExpanded,\n    name: 'TreeView'\n  }),\n      _useControlled2 = _slicedToArray(_useControlled, 2),\n      expandedState = _useControlled2[0],\n      setExpandedState = _useControlled2[1];\n\n  var expanded = expandedState || defaultExpandedDefault;\n  var prevChildIds = React.useRef([]);\n  React.useEffect(function () {\n    var childIds = React.Children.map(children, function (child) {\n      return child.props.nodeId;\n    }) || [];\n\n    if (arrayDiff(prevChildIds.current, childIds)) {\n      nodeMap.current[-1] = {\n        parent: null,\n        children: childIds\n      };\n      childIds.forEach(function (id, index) {\n        if (index === 0) {\n          firstNode.current = id;\n          setTabable(id);\n        }\n\n        nodeMap.current[id] = {\n          parent: null\n        };\n      });\n      prevChildIds.current = childIds;\n    }\n  }, [children]);\n  var isExpanded = React.useCallback(function (id) {\n    return expanded.indexOf(id) !== -1;\n  }, [expanded]);\n\n  var isTabbable = function isTabbable(id) {\n    return tabable === id;\n  };\n\n  var isFocused = function isFocused(id) {\n    return focused === id;\n  };\n\n  var getLastNode = React.useCallback(function (id) {\n    var map = nodeMap.current[id];\n\n    if (isExpanded(id) && map.children && map.children.length > 0) {\n      return getLastNode(map.children[map.children.length - 1]);\n    }\n\n    return id;\n  }, [isExpanded]);\n\n  var focus = function focus(id) {\n    if (id) {\n      setTabable(id);\n    }\n\n    setFocused(id);\n  };\n\n  var getNextNode = function getNextNode(id, end) {\n    var map = nodeMap.current[id];\n    var parent = nodeMap.current[map.parent];\n\n    if (!end) {\n      if (isExpanded(id)) {\n        return map.children[0];\n      }\n    }\n\n    if (parent) {\n      var nodeIndex = parent.children.indexOf(id);\n      var nextIndex = nodeIndex + 1;\n\n      if (parent.children.length > nextIndex) {\n        return parent.children[nextIndex];\n      }\n\n      return getNextNode(parent.id, true);\n    }\n\n    var topLevelNodes = nodeMap.current[-1].children;\n    var topLevelNodeIndex = topLevelNodes.indexOf(id);\n\n    if (topLevelNodeIndex !== -1 && topLevelNodeIndex !== topLevelNodes.length - 1) {\n      return topLevelNodes[topLevelNodeIndex + 1];\n    }\n\n    return null;\n  };\n\n  var getPreviousNode = function getPreviousNode(id) {\n    var map = nodeMap.current[id];\n    var parent = nodeMap.current[map.parent];\n\n    if (parent) {\n      var nodeIndex = parent.children.indexOf(id);\n\n      if (nodeIndex !== 0) {\n        var nextIndex = nodeIndex - 1;\n        return getLastNode(parent.children[nextIndex]);\n      }\n\n      return parent.id;\n    }\n\n    var topLevelNodes = nodeMap.current[-1].children;\n    var topLevelNodeIndex = topLevelNodes.indexOf(id);\n\n    if (topLevelNodeIndex > 0) {\n      return getLastNode(topLevelNodes[topLevelNodeIndex - 1]);\n    }\n\n    return null;\n  };\n\n  var focusNextNode = function focusNextNode(id) {\n    var nextNode = getNextNode(id);\n\n    if (nextNode) {\n      focus(nextNode);\n    }\n  };\n\n  var focusPreviousNode = function focusPreviousNode(id) {\n    var previousNode = getPreviousNode(id);\n\n    if (previousNode) {\n      focus(previousNode);\n    }\n  };\n\n  var focusFirstNode = function focusFirstNode() {\n    if (firstNode.current) {\n      focus(firstNode.current);\n    }\n  };\n\n  var focusLastNode = function focusLastNode() {\n    var topLevelNodes = nodeMap.current[-1].children;\n    var lastNode = getLastNode(topLevelNodes[topLevelNodes.length - 1]);\n    focus(lastNode);\n  };\n\n  var toggle = function toggle(event) {\n    var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : focused;\n    var newExpanded;\n\n    if (expanded.indexOf(value) !== -1) {\n      newExpanded = expanded.filter(function (id) {\n        return id !== value;\n      });\n      setTabable(function (oldTabable) {\n        var map = nodeMap.current[oldTabable];\n\n        if (oldTabable && (map && map.parent ? map.parent.id : null) === value) {\n          return value;\n        }\n\n        return oldTabable;\n      });\n    } else {\n      newExpanded = [value].concat(_toConsumableArray(expanded));\n    }\n\n    if (onNodeToggle) {\n      onNodeToggle(event, newExpanded);\n    }\n\n    setExpandedState(newExpanded);\n  };\n\n  var expandAllSiblings = function expandAllSiblings(event, id) {\n    var map = nodeMap.current[id];\n    var parent = nodeMap.current[map.parent];\n    var diff;\n\n    if (parent) {\n      diff = parent.children.filter(function (child) {\n        return !isExpanded(child);\n      });\n    } else {\n      var topLevelNodes = nodeMap.current[-1].children;\n      diff = topLevelNodes.filter(function (node) {\n        return !isExpanded(node);\n      });\n    }\n\n    var newExpanded = [].concat(_toConsumableArray(expanded), _toConsumableArray(diff));\n    setExpandedState(newExpanded);\n\n    if (onNodeToggle) {\n      onNodeToggle(event, newExpanded);\n    }\n  };\n\n  var handleLeftArrow = function handleLeftArrow(id, event) {\n    var flag = false;\n\n    if (isExpanded(id)) {\n      toggle(event, id);\n      flag = true;\n    } else {\n      var parent = nodeMap.current[id].parent;\n\n      if (parent) {\n        focus(parent);\n        flag = true;\n      }\n    }\n\n    if (flag && event) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  };\n\n  var getIndexFirstChars = function getIndexFirstChars(firstChars, startIndex, char) {\n    for (var i = startIndex; i < firstChars.length; i += 1) {\n      if (char === firstChars[i]) {\n        return i;\n      }\n    }\n\n    return -1;\n  };\n\n  var setFocusByFirstCharacter = function setFocusByFirstCharacter(id, char) {\n    var start;\n    var index;\n    var lowercaseChar = char.toLowerCase();\n    var firstCharIds = [];\n    var firstChars = []; // This really only works since the ids are strings\n\n    Object.entries(firstCharMap.current).forEach(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          nodeId = _ref2[0],\n          firstChar = _ref2[1];\n\n      var map = nodeMap.current[nodeId];\n      var visible = map.parent ? isExpanded(map.parent) : true;\n\n      if (visible) {\n        firstCharIds.push(nodeId);\n        firstChars.push(firstChar);\n      }\n    }); // Get start index for search based on position of currentItem\n\n    start = firstCharIds.indexOf(id) + 1;\n\n    if (start === nodeMap.current.length) {\n      start = 0;\n    } // Check remaining slots in the menu\n\n\n    index = getIndexFirstChars(firstChars, start, lowercaseChar); // If not found in remaining slots, check from beginning\n\n    if (index === -1) {\n      index = getIndexFirstChars(firstChars, 0, lowercaseChar);\n    } // If match was found...\n\n\n    if (index > -1) {\n      focus(firstCharIds[index]);\n    }\n  };\n\n  var addNodeToNodeMap = function addNodeToNodeMap(id, childrenIds) {\n    var currentMap = nodeMap.current[id];\n    nodeMap.current[id] = _extends({}, currentMap, {\n      children: childrenIds,\n      id: id\n    });\n    childrenIds.forEach(function (childId) {\n      var currentChildMap = nodeMap.current[childId];\n      nodeMap.current[childId] = _extends({}, currentChildMap, {\n        parent: id,\n        id: childId\n      });\n    });\n  };\n\n  var removeNodeFromNodeMap = function removeNodeFromNodeMap(id) {\n    var map = nodeMap.current[id];\n\n    if (map) {\n      if (map.parent) {\n        var parentMap = nodeMap.current[map.parent];\n\n        if (parentMap && parentMap.children) {\n          var parentChildren = parentMap.children.filter(function (c) {\n            return c !== id;\n          });\n          nodeMap.current[map.parent] = _extends({}, parentMap, {\n            children: parentChildren\n          });\n        }\n      }\n\n      delete nodeMap.current[id];\n    }\n  };\n\n  var handleFirstChars = function handleFirstChars(id, firstChar) {\n    firstCharMap.current[id] = firstChar;\n  };\n\n  return React.createElement(TreeViewContext.Provider, {\n    value: {\n      expandAllSiblings: expandAllSiblings,\n      focus: focus,\n      focusFirstNode: focusFirstNode,\n      focusLastNode: focusLastNode,\n      focusNextNode: focusNextNode,\n      focusPreviousNode: focusPreviousNode,\n      handleFirstChars: handleFirstChars,\n      handleLeftArrow: handleLeftArrow,\n      addNodeToNodeMap: addNodeToNodeMap,\n      removeNodeFromNodeMap: removeNodeFromNodeMap,\n      icons: {\n        defaultCollapseIcon: defaultCollapseIcon,\n        defaultExpandIcon: defaultExpandIcon,\n        defaultParentIcon: defaultParentIcon,\n        defaultEndIcon: defaultEndIcon\n      },\n      isExpanded: isExpanded,\n      isFocused: isFocused,\n      isTabbable: isTabbable,\n      setFocusByFirstCharacter: setFocusByFirstCharacter,\n      toggle: toggle\n    }\n  }, React.createElement(\"ul\", _extends({\n    role: \"tree\",\n    className: clsx(classes.root, className),\n    ref: ref\n  }, other), children));\n});\nprocess.env.NODE_ENV !== \"production\" ? TreeView.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The default icon used to collapse the node.\n   */\n  defaultCollapseIcon: PropTypes.node,\n\n  /**\n   * The default icon displayed next to a end node. This is applied to all\n   * tree nodes and can be overridden by the TreeItem `icon` prop.\n   */\n  defaultEndIcon: PropTypes.node,\n\n  /**\n   * Expanded node ids. (Uncontrolled)\n   */\n  defaultExpanded: PropTypes.arrayOf(PropTypes.string),\n\n  /**\n   * The default icon used to expand the node.\n   */\n  defaultExpandIcon: PropTypes.node,\n\n  /**\n   * The default icon displayed next to a parent node. This is applied to all\n   * parent nodes and can be overridden by the TreeItem `icon` prop.\n   */\n  defaultParentIcon: PropTypes.node,\n\n  /**\n   * Expanded node ids. (Controlled)\n   */\n  expanded: PropTypes.arrayOf(PropTypes.string),\n\n  /**\n   * Callback fired when tree items are expanded/collapsed.\n   *\n   * @param {object} event The event source of the callback.\n   * @param {array} nodeIds The ids of the expanded nodes.\n   */\n  onNodeToggle: PropTypes.func\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiTreeView'\n})(TreeView);","map":{"version":3,"sources":["/home/srikanth/Documents/astrum_dashboard/node_modules/@material-ui/lab/esm/TreeView/TreeView.js"],"names":["_extends","_toConsumableArray","_slicedToArray","_objectWithoutProperties","React","clsx","PropTypes","TreeViewContext","withStyles","useControlled","styles","root","padding","margin","listStyle","arrayDiff","arr1","arr2","length","i","defaultExpandedDefault","TreeView","forwardRef","props","ref","children","classes","className","defaultCollapseIcon","defaultEndIcon","_props$defaultExpande","defaultExpanded","defaultExpandIcon","defaultParentIcon","expandedProp","expanded","onNodeToggle","other","_React$useState","useState","tabable","setTabable","_React$useState2","focused","setFocused","firstNode","useRef","nodeMap","firstCharMap","_useControlled","controlled","default","name","_useControlled2","expandedState","setExpandedState","prevChildIds","useEffect","childIds","Children","map","child","nodeId","current","parent","forEach","id","index","isExpanded","useCallback","indexOf","isTabbable","isFocused","getLastNode","focus","getNextNode","end","nodeIndex","nextIndex","topLevelNodes","topLevelNodeIndex","getPreviousNode","focusNextNode","nextNode","focusPreviousNode","previousNode","focusFirstNode","focusLastNode","lastNode","toggle","event","value","arguments","undefined","newExpanded","filter","oldTabable","concat","expandAllSiblings","diff","node","handleLeftArrow","flag","preventDefault","stopPropagation","getIndexFirstChars","firstChars","startIndex","char","setFocusByFirstCharacter","start","lowercaseChar","toLowerCase","firstCharIds","Object","entries","_ref","_ref2","firstChar","visible","push","addNodeToNodeMap","childrenIds","currentMap","childId","currentChildMap","removeNodeFromNodeMap","parentMap","parentChildren","c","handleFirstChars","createElement","Provider","icons","role","process","env","NODE_ENV","propTypes","object","string","arrayOf","func"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport React from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport TreeViewContext from './TreeViewContext';\nimport { withStyles } from '@material-ui/core/styles';\nimport { useControlled } from '@material-ui/core/utils';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    padding: 0,\n    margin: 0,\n    listStyle: 'none'\n  }\n};\n\nfunction arrayDiff(arr1, arr2) {\n  if (arr1.length !== arr2.length) return true;\n\n  for (var i = 0; i < arr1.length; i += 1) {\n    if (arr1[i] !== arr2[i]) return true;\n  }\n\n  return false;\n}\n\nvar defaultExpandedDefault = [];\nvar TreeView = React.forwardRef(function TreeView(props, ref) {\n  var children = props.children,\n      classes = props.classes,\n      className = props.className,\n      defaultCollapseIcon = props.defaultCollapseIcon,\n      defaultEndIcon = props.defaultEndIcon,\n      _props$defaultExpande = props.defaultExpanded,\n      defaultExpanded = _props$defaultExpande === void 0 ? defaultExpandedDefault : _props$defaultExpande,\n      defaultExpandIcon = props.defaultExpandIcon,\n      defaultParentIcon = props.defaultParentIcon,\n      expandedProp = props.expanded,\n      onNodeToggle = props.onNodeToggle,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"defaultCollapseIcon\", \"defaultEndIcon\", \"defaultExpanded\", \"defaultExpandIcon\", \"defaultParentIcon\", \"expanded\", \"onNodeToggle\"]);\n\n  var _React$useState = React.useState(null),\n      tabable = _React$useState[0],\n      setTabable = _React$useState[1];\n\n  var _React$useState2 = React.useState(null),\n      focused = _React$useState2[0],\n      setFocused = _React$useState2[1];\n\n  var firstNode = React.useRef(null);\n  var nodeMap = React.useRef({});\n  var firstCharMap = React.useRef({});\n\n  var _useControlled = useControlled({\n    controlled: expandedProp,\n    default: defaultExpanded,\n    name: 'TreeView'\n  }),\n      _useControlled2 = _slicedToArray(_useControlled, 2),\n      expandedState = _useControlled2[0],\n      setExpandedState = _useControlled2[1];\n\n  var expanded = expandedState || defaultExpandedDefault;\n  var prevChildIds = React.useRef([]);\n  React.useEffect(function () {\n    var childIds = React.Children.map(children, function (child) {\n      return child.props.nodeId;\n    }) || [];\n\n    if (arrayDiff(prevChildIds.current, childIds)) {\n      nodeMap.current[-1] = {\n        parent: null,\n        children: childIds\n      };\n      childIds.forEach(function (id, index) {\n        if (index === 0) {\n          firstNode.current = id;\n          setTabable(id);\n        }\n\n        nodeMap.current[id] = {\n          parent: null\n        };\n      });\n      prevChildIds.current = childIds;\n    }\n  }, [children]);\n  var isExpanded = React.useCallback(function (id) {\n    return expanded.indexOf(id) !== -1;\n  }, [expanded]);\n\n  var isTabbable = function isTabbable(id) {\n    return tabable === id;\n  };\n\n  var isFocused = function isFocused(id) {\n    return focused === id;\n  };\n\n  var getLastNode = React.useCallback(function (id) {\n    var map = nodeMap.current[id];\n\n    if (isExpanded(id) && map.children && map.children.length > 0) {\n      return getLastNode(map.children[map.children.length - 1]);\n    }\n\n    return id;\n  }, [isExpanded]);\n\n  var focus = function focus(id) {\n    if (id) {\n      setTabable(id);\n    }\n\n    setFocused(id);\n  };\n\n  var getNextNode = function getNextNode(id, end) {\n    var map = nodeMap.current[id];\n    var parent = nodeMap.current[map.parent];\n\n    if (!end) {\n      if (isExpanded(id)) {\n        return map.children[0];\n      }\n    }\n\n    if (parent) {\n      var nodeIndex = parent.children.indexOf(id);\n      var nextIndex = nodeIndex + 1;\n\n      if (parent.children.length > nextIndex) {\n        return parent.children[nextIndex];\n      }\n\n      return getNextNode(parent.id, true);\n    }\n\n    var topLevelNodes = nodeMap.current[-1].children;\n    var topLevelNodeIndex = topLevelNodes.indexOf(id);\n\n    if (topLevelNodeIndex !== -1 && topLevelNodeIndex !== topLevelNodes.length - 1) {\n      return topLevelNodes[topLevelNodeIndex + 1];\n    }\n\n    return null;\n  };\n\n  var getPreviousNode = function getPreviousNode(id) {\n    var map = nodeMap.current[id];\n    var parent = nodeMap.current[map.parent];\n\n    if (parent) {\n      var nodeIndex = parent.children.indexOf(id);\n\n      if (nodeIndex !== 0) {\n        var nextIndex = nodeIndex - 1;\n        return getLastNode(parent.children[nextIndex]);\n      }\n\n      return parent.id;\n    }\n\n    var topLevelNodes = nodeMap.current[-1].children;\n    var topLevelNodeIndex = topLevelNodes.indexOf(id);\n\n    if (topLevelNodeIndex > 0) {\n      return getLastNode(topLevelNodes[topLevelNodeIndex - 1]);\n    }\n\n    return null;\n  };\n\n  var focusNextNode = function focusNextNode(id) {\n    var nextNode = getNextNode(id);\n\n    if (nextNode) {\n      focus(nextNode);\n    }\n  };\n\n  var focusPreviousNode = function focusPreviousNode(id) {\n    var previousNode = getPreviousNode(id);\n\n    if (previousNode) {\n      focus(previousNode);\n    }\n  };\n\n  var focusFirstNode = function focusFirstNode() {\n    if (firstNode.current) {\n      focus(firstNode.current);\n    }\n  };\n\n  var focusLastNode = function focusLastNode() {\n    var topLevelNodes = nodeMap.current[-1].children;\n    var lastNode = getLastNode(topLevelNodes[topLevelNodes.length - 1]);\n    focus(lastNode);\n  };\n\n  var toggle = function toggle(event) {\n    var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : focused;\n    var newExpanded;\n\n    if (expanded.indexOf(value) !== -1) {\n      newExpanded = expanded.filter(function (id) {\n        return id !== value;\n      });\n      setTabable(function (oldTabable) {\n        var map = nodeMap.current[oldTabable];\n\n        if (oldTabable && (map && map.parent ? map.parent.id : null) === value) {\n          return value;\n        }\n\n        return oldTabable;\n      });\n    } else {\n      newExpanded = [value].concat(_toConsumableArray(expanded));\n    }\n\n    if (onNodeToggle) {\n      onNodeToggle(event, newExpanded);\n    }\n\n    setExpandedState(newExpanded);\n  };\n\n  var expandAllSiblings = function expandAllSiblings(event, id) {\n    var map = nodeMap.current[id];\n    var parent = nodeMap.current[map.parent];\n    var diff;\n\n    if (parent) {\n      diff = parent.children.filter(function (child) {\n        return !isExpanded(child);\n      });\n    } else {\n      var topLevelNodes = nodeMap.current[-1].children;\n      diff = topLevelNodes.filter(function (node) {\n        return !isExpanded(node);\n      });\n    }\n\n    var newExpanded = [].concat(_toConsumableArray(expanded), _toConsumableArray(diff));\n    setExpandedState(newExpanded);\n\n    if (onNodeToggle) {\n      onNodeToggle(event, newExpanded);\n    }\n  };\n\n  var handleLeftArrow = function handleLeftArrow(id, event) {\n    var flag = false;\n\n    if (isExpanded(id)) {\n      toggle(event, id);\n      flag = true;\n    } else {\n      var parent = nodeMap.current[id].parent;\n\n      if (parent) {\n        focus(parent);\n        flag = true;\n      }\n    }\n\n    if (flag && event) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  };\n\n  var getIndexFirstChars = function getIndexFirstChars(firstChars, startIndex, char) {\n    for (var i = startIndex; i < firstChars.length; i += 1) {\n      if (char === firstChars[i]) {\n        return i;\n      }\n    }\n\n    return -1;\n  };\n\n  var setFocusByFirstCharacter = function setFocusByFirstCharacter(id, char) {\n    var start;\n    var index;\n    var lowercaseChar = char.toLowerCase();\n    var firstCharIds = [];\n    var firstChars = []; // This really only works since the ids are strings\n\n    Object.entries(firstCharMap.current).forEach(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          nodeId = _ref2[0],\n          firstChar = _ref2[1];\n\n      var map = nodeMap.current[nodeId];\n      var visible = map.parent ? isExpanded(map.parent) : true;\n\n      if (visible) {\n        firstCharIds.push(nodeId);\n        firstChars.push(firstChar);\n      }\n    }); // Get start index for search based on position of currentItem\n\n    start = firstCharIds.indexOf(id) + 1;\n\n    if (start === nodeMap.current.length) {\n      start = 0;\n    } // Check remaining slots in the menu\n\n\n    index = getIndexFirstChars(firstChars, start, lowercaseChar); // If not found in remaining slots, check from beginning\n\n    if (index === -1) {\n      index = getIndexFirstChars(firstChars, 0, lowercaseChar);\n    } // If match was found...\n\n\n    if (index > -1) {\n      focus(firstCharIds[index]);\n    }\n  };\n\n  var addNodeToNodeMap = function addNodeToNodeMap(id, childrenIds) {\n    var currentMap = nodeMap.current[id];\n    nodeMap.current[id] = _extends({}, currentMap, {\n      children: childrenIds,\n      id: id\n    });\n    childrenIds.forEach(function (childId) {\n      var currentChildMap = nodeMap.current[childId];\n      nodeMap.current[childId] = _extends({}, currentChildMap, {\n        parent: id,\n        id: childId\n      });\n    });\n  };\n\n  var removeNodeFromNodeMap = function removeNodeFromNodeMap(id) {\n    var map = nodeMap.current[id];\n\n    if (map) {\n      if (map.parent) {\n        var parentMap = nodeMap.current[map.parent];\n\n        if (parentMap && parentMap.children) {\n          var parentChildren = parentMap.children.filter(function (c) {\n            return c !== id;\n          });\n          nodeMap.current[map.parent] = _extends({}, parentMap, {\n            children: parentChildren\n          });\n        }\n      }\n\n      delete nodeMap.current[id];\n    }\n  };\n\n  var handleFirstChars = function handleFirstChars(id, firstChar) {\n    firstCharMap.current[id] = firstChar;\n  };\n\n  return React.createElement(TreeViewContext.Provider, {\n    value: {\n      expandAllSiblings: expandAllSiblings,\n      focus: focus,\n      focusFirstNode: focusFirstNode,\n      focusLastNode: focusLastNode,\n      focusNextNode: focusNextNode,\n      focusPreviousNode: focusPreviousNode,\n      handleFirstChars: handleFirstChars,\n      handleLeftArrow: handleLeftArrow,\n      addNodeToNodeMap: addNodeToNodeMap,\n      removeNodeFromNodeMap: removeNodeFromNodeMap,\n      icons: {\n        defaultCollapseIcon: defaultCollapseIcon,\n        defaultExpandIcon: defaultExpandIcon,\n        defaultParentIcon: defaultParentIcon,\n        defaultEndIcon: defaultEndIcon\n      },\n      isExpanded: isExpanded,\n      isFocused: isFocused,\n      isTabbable: isTabbable,\n      setFocusByFirstCharacter: setFocusByFirstCharacter,\n      toggle: toggle\n    }\n  }, React.createElement(\"ul\", _extends({\n    role: \"tree\",\n    className: clsx(classes.root, className),\n    ref: ref\n  }, other), children));\n});\nprocess.env.NODE_ENV !== \"production\" ? TreeView.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The default icon used to collapse the node.\n   */\n  defaultCollapseIcon: PropTypes.node,\n\n  /**\n   * The default icon displayed next to a end node. This is applied to all\n   * tree nodes and can be overridden by the TreeItem `icon` prop.\n   */\n  defaultEndIcon: PropTypes.node,\n\n  /**\n   * Expanded node ids. (Uncontrolled)\n   */\n  defaultExpanded: PropTypes.arrayOf(PropTypes.string),\n\n  /**\n   * The default icon used to expand the node.\n   */\n  defaultExpandIcon: PropTypes.node,\n\n  /**\n   * The default icon displayed next to a parent node. This is applied to all\n   * parent nodes and can be overridden by the TreeItem `icon` prop.\n   */\n  defaultParentIcon: PropTypes.node,\n\n  /**\n   * Expanded node ids. (Controlled)\n   */\n  expanded: PropTypes.arrayOf(PropTypes.string),\n\n  /**\n   * Callback fired when tree items are expanded/collapsed.\n   *\n   * @param {object} event The event source of the callback.\n   * @param {array} nodeIds The ids of the expanded nodes.\n   */\n  onNodeToggle: PropTypes.func\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiTreeView'\n})(TreeView);"]},"metadata":{},"sourceType":"module"}