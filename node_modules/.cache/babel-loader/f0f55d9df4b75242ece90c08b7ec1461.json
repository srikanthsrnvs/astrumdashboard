{"ast":null,"code":"var _jsxFileName = \"/home/srikanth/Documents/astrum_dashboard/src/components/imageClassiferBuilder.js\";\nimport React, { useState } from 'react';\nimport { Typography, ThemeProvider, TextField, CircularProgress, Snackbar, SnackbarContent } from '@material-ui/core';\nimport FileDropper from './fileDropper';\nimport Button from '@material-ui/core/Button';\nimport Alert from '@material-ui/lab/Alert';\nimport { Link } from 'react-router-dom';\nimport { Treebeard } from 'react-treebeard';\nconst styles = {\n  buildButton: {\n    marginTop: '40px'\n  },\n  projectName: {\n    marginTop: '40px'\n  }\n};\nconst dataTree = [{\n  name: 'Dog.zip',\n  toggled: true,\n  children: [{\n    name: 'dog1.jpg'\n  }, {\n    name: 'dog2.jpg'\n  }]\n}, {\n  name: 'Cat.zip',\n  toggled: false,\n  children: [{\n    name: 'cat1.jpg'\n  }, {\n    name: 'cat2.jpg'\n  }]\n}];\nexport default function ImageClassiferBuilder(props) {\n  const [files, setFiles] = useState([]);\n  const user = props.user;\n  const [jobName, setJobName] = useState(\"\");\n  const [jobID, setJobID] = useState(\"\");\n  const [loading, isLoading] = useState(false);\n  const baseURL = 'https://astrumdashboard.appspot.com/';\n  const [data, setData] = useState(dataTree);\n  const [cursor, setCursor] = useState(false);\n\n  const fileStructureToggle = (node, toggled) => {\n    if (cursor) {\n      cursor.active = false;\n    }\n\n    node.active = true;\n\n    if (node.children) {\n      node.toggled = toggled;\n    }\n\n    setCursor(node);\n    setData(Object.assign({}, data));\n  };\n\n  function upload_dataset() {\n    var xhr = new XMLHttpRequest();\n    xhr.open('POST', baseURL + 'datasets');\n    xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n    var post_body = {\n      \"type\": \"image_classification\",\n      \"uploaded_by\": user.uid\n    };\n    post_body[\"child_datasets\"] = files;\n    xhr.send(JSON.stringify(post_body));\n    xhr.addEventListener('load', () => {\n      if (xhr.status === 200) {\n        const datasetID = JSON.parse(xhr.response).dataset_id;\n        beginTraining(datasetID);\n      }\n    });\n  }\n\n  function beginTraining(dID) {\n    var xhr = new XMLHttpRequest();\n    xhr.open('POST', baseURL + 'jobs');\n    xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n    var post_body = {\n      \"type\": \"image_classification\",\n      \"dataset\": dID,\n      \"created_by\": user.uid,\n      \"created_at\": Math.floor(new Date() / 1000),\n      'name': jobName\n    };\n    xhr.send(JSON.stringify(post_body));\n    xhr.addEventListener('load', () => {\n      if (xhr.status === 200) {\n        const jobID = JSON.parse(xhr.response).job_id;\n        console.log(\"Recieved jobID \" + jobID);\n        isLoading(false);\n        setJobID(jobID);\n      }\n    });\n  }\n\n  function build_classifer() {\n    isLoading(true);\n    upload_dataset();\n  }\n\n  const ShowSpinner = () => {\n    if (loading) {\n      return React.createElement(CircularProgress, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      });\n    } else {\n      return null;\n    }\n  };\n\n  const SnackbarAction = React.createElement(Link, {\n    to: \"/dashboard/all_projects\",\n    style: {\n      'textDecoration': 'none',\n      color: '#FFF'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }, React.createElement(Button, {\n    color: \"primary\",\n    variant: \"contained\",\n    size: \"small\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }, \"Track Job\"));\n  return React.createElement(\"div\", {\n    style: {\n      marginTop: 20\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    variant: \"h6\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, \"Let's get started\"), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }), React.createElement(Typography, {\n    variant: \"body2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }, \"First we'll need to upload data. In the box below, drop folders containing images of a particular class.\"), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }), React.createElement(Typography, {\n    variant: \"body2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }, \"You'll need to organize your images into folders to make sure that the algorithm learns correctly. Here's a folder structure for a classifier that learns to classify Dogs, Cats, and Birds:\"), React.createElement(Treebeard, {\n    style: {\n      tree: {\n        base: {\n          backgroundColor: '#ffffff00'\n        }\n      }\n    },\n    data: data,\n    onToggle: fileStructureToggle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }), React.createElement(FileDropper, {\n    setFilesAction: setFiles,\n    firebase: props.firebase,\n    user: props.user,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }), React.createElement(\"form\", {\n    style: styles.projectName,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }, \"Give your project a name\"), React.createElement(TextField, {\n    onChange: e => setJobName(e.target.value),\n    id: \"jobName\",\n    label: \"Project Name\",\n    variant: \"outlined\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  })), React.createElement(Button, {\n    style: styles.buildButton,\n    variant: \"outlined\",\n    color: \"primary\",\n    disabled: Object.keys(files).length < 2 || jobID !== \"\" || jobName === \"\" || loading,\n    onClick: build_classifer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }, \"Build Predictor\"), React.createElement(ShowSpinner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  }), React.createElement(Snackbar, {\n    open: jobID !== \"\",\n    autoHideDuration: 6000,\n    anchorOrigin: {\n      'horizontal': \"right\",\n      'vertical': \"bottom\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }, React.createElement(SnackbarContent, {\n    action: SnackbarAction,\n    message: \"Sit tight, we're training a neural network for you ;)\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  })));\n}","map":{"version":3,"sources":["/home/srikanth/Documents/astrum_dashboard/src/components/imageClassiferBuilder.js"],"names":["React","useState","Typography","ThemeProvider","TextField","CircularProgress","Snackbar","SnackbarContent","FileDropper","Button","Alert","Link","Treebeard","styles","buildButton","marginTop","projectName","dataTree","name","toggled","children","ImageClassiferBuilder","props","files","setFiles","user","jobName","setJobName","jobID","setJobID","loading","isLoading","baseURL","data","setData","cursor","setCursor","fileStructureToggle","node","active","Object","assign","upload_dataset","xhr","XMLHttpRequest","open","setRequestHeader","post_body","uid","send","JSON","stringify","addEventListener","status","datasetID","parse","response","dataset_id","beginTraining","dID","Math","floor","Date","job_id","console","log","build_classifer","ShowSpinner","SnackbarAction","color","tree","base","backgroundColor","firebase","e","target","value","keys","length"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { Typography, ThemeProvider, TextField, CircularProgress, Snackbar, SnackbarContent } from '@material-ui/core'\nimport FileDropper from './fileDropper'\nimport Button from '@material-ui/core/Button'\nimport Alert from '@material-ui/lab/Alert'\nimport { Link } from 'react-router-dom'\nimport {Treebeard} from 'react-treebeard';\n\nconst styles = {\n    buildButton: {\n        marginTop: '40px'\n    },\n    projectName: {\n        marginTop: '40px'\n    }\n}\nconst dataTree = [\n    { name: 'Dog.zip',\n    toggled: true,\n    children: [\n        { name: 'dog1.jpg' },\n        { name: 'dog2.jpg' }\n    ]},\n    {name: 'Cat.zip',\n    toggled: false,\n    children: [\n        { name: 'cat1.jpg' },\n        { name: 'cat2.jpg' }\n    ]}\n]\n\nexport default function ImageClassiferBuilder(props) {\n\n    const [files, setFiles] = useState([])\n    const user = props.user;\n    const [jobName, setJobName] = useState(\"\")\n    const [jobID, setJobID] = useState(\"\")\n    const [loading, isLoading] = useState(false)\n    const baseURL = 'https://astrumdashboard.appspot.com/'\n    const [data, setData] = useState(dataTree);\n    const [cursor, setCursor] = useState(false);\n\n\n    \n    const fileStructureToggle = (node, toggled) => {\n        if (cursor) {\n            cursor.active = false;\n        }\n        node.active = true;\n        if (node.children) {\n            node.toggled = toggled;\n        }\n        setCursor(node);\n        setData(Object.assign({}, data))\n    }\n\n    function upload_dataset() {\n        var xhr = new XMLHttpRequest()\n        xhr.open('POST', baseURL + 'datasets')\n        xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n\n        var post_body = {\n            \"type\": \"image_classification\",\n            \"uploaded_by\": user.uid\n        }\n        post_body[\"child_datasets\"] = files\n        xhr.send(JSON.stringify(\n            post_body\n        ))\n        xhr.addEventListener('load', () => {\n            if (xhr.status === 200) {\n                const datasetID = JSON.parse(xhr.response).dataset_id\n                beginTraining(datasetID)\n            }\n        })\n    }\n\n    function beginTraining(dID) {\n        var xhr = new XMLHttpRequest()\n        xhr.open('POST', baseURL + 'jobs')\n        xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n\n        var post_body = {\n            \"type\": \"image_classification\",\n            \"dataset\": dID,\n            \"created_by\": user.uid,\n            \"created_at\": Math.floor(new Date() / 1000),\n            'name': jobName\n        }\n\n        xhr.send(JSON.stringify(\n            post_body\n        ))\n        xhr.addEventListener('load', () => {\n            if (xhr.status === 200) {\n                const jobID = JSON.parse(xhr.response).job_id\n                console.log(\"Recieved jobID \" + jobID)\n                isLoading(false)\n                setJobID(jobID)\n            }\n        })\n    }\n\n    function build_classifer() {\n        isLoading(true)\n        upload_dataset()\n    }\n\n    const ShowSpinner = () => {\n        if (loading) {\n            return (\n                <CircularProgress />\n            )\n        } else {\n            return (\n                null\n            )\n        }\n    }\n\n    const SnackbarAction = (\n        <Link to='/dashboard/all_projects' style={{'textDecoration': 'none', color: '#FFF'}}>\n            <Button color='primary' variant='contained' size='small'>\n                Track Job\n            </Button>\n        </Link>\n    )\n\n    return (\n        <div style={{marginTop:20}}>\n            <Typography variant='h6'>Let's get started</Typography>\n            <br></br>\n            <Typography variant='body2'>First we'll need to upload data. In the box below, drop folders containing images of a particular class.</Typography>\n            <br></br>\n            <Typography variant='body2'>You'll need to organize your images into folders to make sure that the algorithm learns correctly. Here's a folder structure for a classifier that learns to classify Dogs, Cats, and Birds:</Typography>\n            <Treebeard\n                style={{tree:{base:{backgroundColor: '#ffffff00'}}}}\n                data={data}\n                onToggle={fileStructureToggle}\n            />\n            <FileDropper setFilesAction={setFiles} firebase={props.firebase} user={props.user}></FileDropper>\n            <form style={styles.projectName}>\n                <h2>Give your project a name</h2>\n                <TextField onChange={e => setJobName(e.target.value)} id='jobName' label='Project Name' variant='outlined' />\n            </form>\n            <Button style={styles.buildButton} variant='outlined' color='primary' disabled={Object.keys(files).length < 2 || jobID !== \"\" || jobName === \"\" || loading} onClick={build_classifer}>Build Predictor</Button>\n            <ShowSpinner />\n            <Snackbar open={jobID !== \"\"} autoHideDuration={6000} anchorOrigin={{'horizontal': \"right\", 'vertical': \"bottom\"}}>\n                <SnackbarContent\n                    action={SnackbarAction}\n                    message={\"Sit tight, we're training a neural network for you ;)\"}\n                />\n            </Snackbar>\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}