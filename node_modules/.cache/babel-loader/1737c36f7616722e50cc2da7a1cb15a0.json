{"ast":null,"code":"var _jsxFileName = \"/home/srikanth/Documents/astrum_dashboard/src/components/project.js\";\nimport React, { useEffect, useState, useRef } from 'react';\nimport { useRouteMatch, Link } from 'react-router-dom';\nimport ImageUploader from 'react-images-upload';\nimport { Button, Typography, Divider } from '@material-ui/core';\nimport { GetApp } from '@material-ui/icons';\nexport default function Project(props) {\n  const match = useRouteMatch();\n  const data = props.data[match.params.id];\n  const [image, setImage] = useState(null);\n  const [results, setResults] = useState({});\n\n  var title = function onDrop(uploadedImages, url) {\n    setImage(uploadedImages[0]);\n  };\n\n  function performPrediction() {\n    setResults({});\n    const url = 'http://127.0.0.1:8080/predict/' + match.params.id;\n    const formData = new FormData();\n    formData.append('image', image);\n    const options = {\n      method: 'POST',\n      body: formData\n    };\n    fetch(url, options).then(response => response.json()).then(result => {\n      setResults(result);\n      console.log(result);\n    }).catch(error => {\n      console.log(error);\n    });\n  }\n\n  function downloadTensorboard() {\n    window.open(data.tb_logs, '_blank');\n  }\n\n  const ShowResults = () => {\n    const predictions = results['predictions'];\n    console.log(Object.keys(results).length);\n    return Object.keys(results).length > 0 && React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, \"Predicted \", results['label_map'][predictions[0].indexOf(Math.max(...predictions[0])).toString()], \" with \", Math.max(...predictions[0]) * 100, \"% confidence\"));\n  };\n\n  const ShowPredictor = () => {\n    return image && React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: performPrediction,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, \"Predict\"));\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, data.name), React.createElement(Divider, {\n    style: {\n      marginBottom: 30\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }), React.createElement(Button, {\n    variant: \"text\",\n    color: \"primary\",\n    onClick: downloadTensorboard,\n    endIcon: React.createElement(GetApp, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, \"Tensorboard logs\"), React.createElement(ImageUploader, {\n    withIcon: true,\n    buttonText: \"Upload Image\",\n    onChange: onDrop,\n    imgExtension: ['.jpg', '.jpeg', '.png'],\n    singleImage: true,\n    withPreview: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }), React.createElement(ShowPredictor, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }), React.createElement(ShowResults, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }));\n}","map":{"version":3,"sources":["/home/srikanth/Documents/astrum_dashboard/src/components/project.js"],"names":["React","useEffect","useState","useRef","useRouteMatch","Link","ImageUploader","Button","Typography","Divider","GetApp","Project","props","match","data","params","id","image","setImage","results","setResults","title","onDrop","uploadedImages","url","performPrediction","formData","FormData","append","options","method","body","fetch","then","response","json","result","console","log","catch","error","downloadTensorboard","window","open","tb_logs","ShowResults","predictions","Object","keys","length","indexOf","Math","max","toString","ShowPredictor","name","marginBottom"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport { useRouteMatch, Link } from 'react-router-dom'\nimport ImageUploader from 'react-images-upload'\nimport { Button, Typography, Divider } from '@material-ui/core'\nimport { GetApp } from '@material-ui/icons'\n\nexport default function Project(props) {\n\n    const match = useRouteMatch()\n    const data = props.data[match.params.id]\n    const [image, setImage] = useState(null)\n    const [results, setResults] = useState({})\n    var title = \n\n    function onDrop(uploadedImages, url) {\n        setImage(uploadedImages[0])\n    }\n\n    function performPrediction() {\n        setResults({})\n        const url = 'http://127.0.0.1:8080/predict/' + match.params.id\n        const formData = new FormData()\n        formData.append('image', image)\n        const options = {\n            method: 'POST',\n            body: formData\n        }\n        fetch(url, options)\n            .then(response => response.json())\n            .then(result => {\n                setResults(result)\n                console.log(result)\n            })\n            .catch(error => {\n                console.log(error)\n            })\n    }\n\n    function downloadTensorboard(){\n        window.open(data.tb_logs, '_blank');\n    }\n\n    const ShowResults = () => {\n        const predictions = results['predictions']\n        console.log(Object.keys(results).length)\n        return (\n            Object.keys(results).length > 0 &&\n            <div>\n                <h1>\n                    Predicted {results['label_map'][predictions[0].indexOf(Math.max(...predictions[0])).toString()]} with {Math.max(...predictions[0]) * 100}% confidence\n                </h1>\n            </div>\n        )\n    }\n\n    const ShowPredictor = () => {\n\n        return (\n            image &&\n            <div>\n                <Button variant='contained' color='primary' onClick={performPrediction}>Predict</Button>\n            </div>\n        )\n    }\n\n\n    return (\n        <div>\n            <h1>{data.name}</h1>\n            <Divider style={{marginBottom: 30}}></Divider>\n            <Button variant='text' color='primary' onClick={downloadTensorboard} endIcon={<GetApp />}>\n                Tensorboard logs\n            </Button>\n            <ImageUploader\n                withIcon={true}\n                buttonText='Upload Image'\n                onChange={onDrop}\n                imgExtension={['.jpg', '.jpeg', '.png']}\n                singleImage={true}\n                withPreview={true}\n            />\n            <ShowPredictor />\n            <ShowResults />\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}