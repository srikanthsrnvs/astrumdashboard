{"ast":null,"code":"import getTheme from './getTheme';\n\nfunction themedVariants(variantProp, variants) {\n  return function (props) {\n    var theme = getTheme(props);\n\n    if (props && props[variantProp] && variants) {\n      var modes = variants[props[variantProp]];\n\n      if (modes) {\n        return modes[theme.mode];\n      }\n    }\n\n    return \"\";\n  };\n}\n\nexport default function themed(modesOrVariant, variantModes) {\n  if (typeof modesOrVariant === \"string\") {\n    return themedVariants(modesOrVariant, variantModes);\n  }\n\n  var modes = modesOrVariant;\n  return function (props) {\n    var theme = getTheme(props);\n    return modes[theme.mode];\n  };\n}","map":{"version":3,"sources":["/home/srikanth/Documents/astrum_dashboard/node_modules/react-code-blocks/build/esm/utils/themed.js"],"names":["getTheme","themedVariants","variantProp","variants","props","theme","modes","mode","themed","modesOrVariant","variantModes"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,YAArB;;AAEA,SAASC,cAAT,CAAwBC,WAAxB,EAAqCC,QAArC,EAA+C;AAC7C,SAAO,UAAUC,KAAV,EAAiB;AACtB,QAAIC,KAAK,GAAGL,QAAQ,CAACI,KAAD,CAApB;;AAEA,QAAIA,KAAK,IAAIA,KAAK,CAACF,WAAD,CAAd,IAA+BC,QAAnC,EAA6C;AAC3C,UAAIG,KAAK,GAAGH,QAAQ,CAACC,KAAK,CAACF,WAAD,CAAN,CAApB;;AAEA,UAAII,KAAJ,EAAW;AACT,eAAOA,KAAK,CAACD,KAAK,CAACE,IAAP,CAAZ;AACD;AACF;;AAED,WAAO,EAAP;AACD,GAZD;AAaD;;AAED,eAAe,SAASC,MAAT,CAAgBC,cAAhB,EAAgCC,YAAhC,EAA8C;AAC3D,MAAI,OAAOD,cAAP,KAA0B,QAA9B,EAAwC;AACtC,WAAOR,cAAc,CAACQ,cAAD,EAAiBC,YAAjB,CAArB;AACD;;AAED,MAAIJ,KAAK,GAAGG,cAAZ;AACA,SAAO,UAAUL,KAAV,EAAiB;AACtB,QAAIC,KAAK,GAAGL,QAAQ,CAACI,KAAD,CAApB;AACA,WAAOE,KAAK,CAACD,KAAK,CAACE,IAAP,CAAZ;AACD,GAHD;AAID","sourcesContent":["import getTheme from './getTheme';\n\nfunction themedVariants(variantProp, variants) {\n  return function (props) {\n    var theme = getTheme(props);\n\n    if (props && props[variantProp] && variants) {\n      var modes = variants[props[variantProp]];\n\n      if (modes) {\n        return modes[theme.mode];\n      }\n    }\n\n    return \"\";\n  };\n}\n\nexport default function themed(modesOrVariant, variantModes) {\n  if (typeof modesOrVariant === \"string\") {\n    return themedVariants(modesOrVariant, variantModes);\n  }\n\n  var modes = modesOrVariant;\n  return function (props) {\n    var theme = getTheme(props);\n    return modes[theme.mode];\n  };\n}"]},"metadata":{},"sourceType":"module"}