{"ast":null,"code":"module.exports = function (hljs) {\n  var KEYWORDS = 'for let if while then else return where group by xquery encoding version' + 'module namespace boundary-space preserve strip default collation base-uri ordering' + 'copy-namespaces order declare import schema namespace function option in allowing empty' + 'at tumbling window sliding window start when only end when previous next stable ascending' + 'descending empty greatest least some every satisfies switch case typeswitch try catch and' + 'or to union intersect instance of treat as castable cast map array delete insert into' + 'replace value rename copy modify update';\n  var LITERAL = 'false true xs:string xs:integer element item xs:date xs:datetime xs:float xs:double xs:decimal QName xs:anyURI xs:long xs:int xs:short xs:byte attribute';\n  var VAR = {\n    begin: /\\$[a-zA-Z0-9\\-]+/\n  };\n  var NUMBER = {\n    className: 'number',\n    begin: '(\\\\b0[0-7_]+)|(\\\\b0x[0-9a-fA-F_]+)|(\\\\b[1-9][0-9_]*(\\\\.[0-9_]+)?)|[0_]\\\\b',\n    relevance: 0\n  };\n  var STRING = {\n    className: 'string',\n    variants: [{\n      begin: /\"/,\n      end: /\"/,\n      contains: [{\n        begin: /\"\"/,\n        relevance: 0\n      }]\n    }, {\n      begin: /'/,\n      end: /'/,\n      contains: [{\n        begin: /''/,\n        relevance: 0\n      }]\n    }]\n  };\n  var ANNOTATION = {\n    className: 'meta',\n    begin: '%\\\\w+'\n  };\n  var COMMENT = {\n    className: 'comment',\n    begin: '\\\\(:',\n    end: ':\\\\)',\n    relevance: 10,\n    contains: [{\n      className: 'doctag',\n      begin: '@\\\\w+'\n    }]\n  };\n  var METHOD = {\n    begin: '{',\n    end: '}'\n  };\n  var CONTAINS = [VAR, STRING, NUMBER, COMMENT, ANNOTATION, METHOD];\n  METHOD.contains = CONTAINS;\n  return {\n    aliases: ['xpath', 'xq'],\n    case_insensitive: false,\n    lexemes: /[a-zA-Z\\$][a-zA-Z0-9_:\\-]*/,\n    illegal: /(proc)|(abstract)|(extends)|(until)|(#)/,\n    keywords: {\n      keyword: KEYWORDS,\n      literal: LITERAL\n    },\n    contains: CONTAINS\n  };\n};","map":{"version":3,"sources":["/home/srikanth/Documents/astrum_dashboard/node_modules/highlight.js/lib/languages/xquery.js"],"names":["module","exports","hljs","KEYWORDS","LITERAL","VAR","begin","NUMBER","className","relevance","STRING","variants","end","contains","ANNOTATION","COMMENT","METHOD","CONTAINS","aliases","case_insensitive","lexemes","illegal","keywords","keyword","literal"],"mappings":"AAAAA,MAAM,CAACC,OAAP,GAAiB,UAASC,IAAT,EAAe;AAC9B,MAAIC,QAAQ,GAAG,6EACb,oFADa,GAEb,yFAFa,GAGb,2FAHa,GAIb,2FAJa,GAKb,uFALa,GAMb,yCANF;AAOA,MAAIC,OAAO,GAAG,0JAAd;AACA,MAAIC,GAAG,GAAG;AACRC,IAAAA,KAAK,EAAE;AADC,GAAV;AAIA,MAAIC,MAAM,GAAG;AACXC,IAAAA,SAAS,EAAE,QADA;AAEXF,IAAAA,KAAK,EAAE,2EAFI;AAGXG,IAAAA,SAAS,EAAE;AAHA,GAAb;AAMA,MAAIC,MAAM,GAAG;AACXF,IAAAA,SAAS,EAAE,QADA;AAEXG,IAAAA,QAAQ,EAAE,CACR;AAACL,MAAAA,KAAK,EAAE,GAAR;AAAaM,MAAAA,GAAG,EAAE,GAAlB;AAAuBC,MAAAA,QAAQ,EAAE,CAAC;AAACP,QAAAA,KAAK,EAAE,IAAR;AAAcG,QAAAA,SAAS,EAAE;AAAzB,OAAD;AAAjC,KADQ,EAER;AAACH,MAAAA,KAAK,EAAE,GAAR;AAAaM,MAAAA,GAAG,EAAE,GAAlB;AAAuBC,MAAAA,QAAQ,EAAE,CAAC;AAACP,QAAAA,KAAK,EAAE,IAAR;AAAcG,QAAAA,SAAS,EAAE;AAAzB,OAAD;AAAjC,KAFQ;AAFC,GAAb;AAQA,MAAIK,UAAU,GAAG;AACfN,IAAAA,SAAS,EAAE,MADI;AAEfF,IAAAA,KAAK,EAAE;AAFQ,GAAjB;AAKA,MAAIS,OAAO,GAAG;AACZP,IAAAA,SAAS,EAAE,SADC;AAEZF,IAAAA,KAAK,EAAE,MAFK;AAEGM,IAAAA,GAAG,EAAE,MAFR;AAGZH,IAAAA,SAAS,EAAE,EAHC;AAIZI,IAAAA,QAAQ,EAAE,CACR;AACEL,MAAAA,SAAS,EAAE,QADb;AACuBF,MAAAA,KAAK,EAAE;AAD9B,KADQ;AAJE,GAAd;AAWA,MAAIU,MAAM,GAAG;AACXV,IAAAA,KAAK,EAAE,GADI;AACCM,IAAAA,GAAG,EAAE;AADN,GAAb;AAIA,MAAIK,QAAQ,GAAG,CACbZ,GADa,EAEbK,MAFa,EAGbH,MAHa,EAIbQ,OAJa,EAKbD,UALa,EAMbE,MANa,CAAf;AAQAA,EAAAA,MAAM,CAACH,QAAP,GAAkBI,QAAlB;AAGA,SAAO;AACLC,IAAAA,OAAO,EAAE,CAAC,OAAD,EAAU,IAAV,CADJ;AAELC,IAAAA,gBAAgB,EAAE,KAFb;AAGLC,IAAAA,OAAO,EAAE,4BAHJ;AAILC,IAAAA,OAAO,EAAE,yCAJJ;AAKLC,IAAAA,QAAQ,EAAE;AACRC,MAAAA,OAAO,EAAEpB,QADD;AAERqB,MAAAA,OAAO,EAAEpB;AAFD,KALL;AASLS,IAAAA,QAAQ,EAAEI;AATL,GAAP;AAWD,CArED","sourcesContent":["module.exports = function(hljs) {\n  var KEYWORDS = 'for let if while then else return where group by xquery encoding version' +\n    'module namespace boundary-space preserve strip default collation base-uri ordering' +\n    'copy-namespaces order declare import schema namespace function option in allowing empty' +\n    'at tumbling window sliding window start when only end when previous next stable ascending' +\n    'descending empty greatest least some every satisfies switch case typeswitch try catch and' +\n    'or to union intersect instance of treat as castable cast map array delete insert into' +\n    'replace value rename copy modify update';\n  var LITERAL = 'false true xs:string xs:integer element item xs:date xs:datetime xs:float xs:double xs:decimal QName xs:anyURI xs:long xs:int xs:short xs:byte attribute';\n  var VAR = {\n    begin: /\\$[a-zA-Z0-9\\-]+/\n  };\n\n  var NUMBER = {\n    className: 'number',\n    begin: '(\\\\b0[0-7_]+)|(\\\\b0x[0-9a-fA-F_]+)|(\\\\b[1-9][0-9_]*(\\\\.[0-9_]+)?)|[0_]\\\\b',\n    relevance: 0\n  };\n\n  var STRING = {\n    className: 'string',\n    variants: [\n      {begin: /\"/, end: /\"/, contains: [{begin: /\"\"/, relevance: 0}]},\n      {begin: /'/, end: /'/, contains: [{begin: /''/, relevance: 0}]}\n    ]\n  };\n\n  var ANNOTATION = {\n    className: 'meta',\n    begin: '%\\\\w+'\n  };\n\n  var COMMENT = {\n    className: 'comment',\n    begin: '\\\\(:', end: ':\\\\)',\n    relevance: 10,\n    contains: [\n      {\n        className: 'doctag', begin: '@\\\\w+'\n      }\n    ]\n  };\n\n  var METHOD = {\n    begin: '{', end: '}'\n  };\n\n  var CONTAINS = [\n    VAR,\n    STRING,\n    NUMBER,\n    COMMENT,\n    ANNOTATION,\n    METHOD\n  ];\n  METHOD.contains = CONTAINS;\n\n\n  return {\n    aliases: ['xpath', 'xq'],\n    case_insensitive: false,\n    lexemes: /[a-zA-Z\\$][a-zA-Z0-9_:\\-]*/,\n    illegal: /(proc)|(abstract)|(extends)|(until)|(#)/,\n    keywords: {\n      keyword: KEYWORDS,\n      literal: LITERAL\n    },\n    contains: CONTAINS\n  };\n};"]},"metadata":{},"sourceType":"script"}