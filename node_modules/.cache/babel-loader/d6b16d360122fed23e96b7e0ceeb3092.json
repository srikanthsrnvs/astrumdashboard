{"ast":null,"code":"var _jsxFileName = \"/home/srikanth/Documents/astrum_dashboard/dashboard/src/components/fileDropper.js\";\nimport React, { useMemo, useCallback, useState } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport Chip from '@material-ui/core/Chip';\nimport { Button } from '@material-ui/core';\nconst baseStyle = {\n  flex: 1,\n  display: 'flex',\n  flexDirection: 'column',\n  alignItems: 'center',\n  padding: '20px',\n  borderWidth: 2,\n  borderRadius: 2,\n  borderColor: '#eeeeee',\n  borderStyle: 'dashed',\n  backgroundColor: '#fafafa',\n  color: '#bdbdbd',\n  outline: 'none',\n  transition: 'border .24s ease-in-out',\n  marginTop: 20\n};\nconst activeStyle = {\n  borderColor: '#2196f3'\n};\nconst chipStyle = {\n  marginTop: '10px',\n  marginRight: '5px'\n};\nconst acceptStyle = {\n  borderColor: '#00e676'\n};\nconst rejectStyle = {\n  borderColor: '#ff1744'\n};\nexport default function FileDropper(props) {\n  const firebase = props.firebase;\n  const user = props.user;\n  const [files, setFiles] = useState({});\n  const onDrop = useCallback(acceptedFiles => {\n    acceptedFiles.forEach(file => {\n      const reader = new FileReader();\n\n      reader.onabort = () => console.log('file reading was aborted');\n\n      reader.onerror = () => console.log('file reading has failed');\n\n      reader.onload = () => {\n        // Do whatever you want with the file contents\n        const binaryStr = reader.result;\n        console.log(binaryStr);\n      };\n\n      reader.readAsArrayBuffer(file);\n      firebase.upload_file(file, user).then(function (snapshot) {\n        var files_object = files;\n        files_obejct[file.name] = snapshot.metadata;\n        setFiles(files_object);\n        console.log(files_object);\n      });\n    });\n  }, []);\n  const {\n    getRootProps,\n    getInputProps,\n    isDragActive,\n    isDragAccept,\n    isDragReject\n  } = useDropzone({\n    accept: '.zip',\n    onDrop\n  });\n\n  const FileChips = () => {\n    var chips = [];\n    files.forEach(file => {\n      chips.push(React.createElement(Chip, {\n        variant: \"outlined\",\n        style: chipStyle,\n        key: file.name,\n        label: file.name.split('.').slice(0, -1).join('.'),\n        color: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }));\n    });\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, chips, React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: build_classifier,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }));\n  };\n\n  const style = useMemo(() => ({ ...baseStyle,\n    ...(isDragActive ? activeStyle : {}),\n    ...(isDragAccept ? acceptStyle : {}),\n    ...(isDragReject ? rejectStyle : {})\n  }), [isDragActive, isDragReject]);\n  return React.createElement(\"div\", {\n    className: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, React.createElement(\"div\", Object.assign({}, getRootProps({\n    style\n  }), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }), React.createElement(\"input\", Object.assign({}, getInputProps(), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  })), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, \"Drop your .zip file here or click to select a file to upload\")), React.createElement(FileChips, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }));\n}","map":{"version":3,"sources":["/home/srikanth/Documents/astrum_dashboard/dashboard/src/components/fileDropper.js"],"names":["React","useMemo","useCallback","useState","useDropzone","Chip","Button","baseStyle","flex","display","flexDirection","alignItems","padding","borderWidth","borderRadius","borderColor","borderStyle","backgroundColor","color","outline","transition","marginTop","activeStyle","chipStyle","marginRight","acceptStyle","rejectStyle","FileDropper","props","firebase","user","files","setFiles","onDrop","acceptedFiles","forEach","file","reader","FileReader","onabort","console","log","onerror","onload","binaryStr","result","readAsArrayBuffer","upload_file","then","snapshot","files_object","files_obejct","name","metadata","getRootProps","getInputProps","isDragActive","isDragAccept","isDragReject","accept","FileChips","chips","push","split","slice","join","build_classifier","style"],"mappings":"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","sourcesContent":["import React, {useMemo, useCallback, useState} from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport Chip from '@material-ui/core/Chip'\nimport { Button } from '@material-ui/core';\n\nconst baseStyle = {\n    flex: 1,\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    padding: '20px',\n    borderWidth: 2,\n    borderRadius: 2,\n    borderColor: '#eeeeee',\n    borderStyle: 'dashed',\n    backgroundColor: '#fafafa',\n    color: '#bdbdbd',\n    outline: 'none',\n    transition: 'border .24s ease-in-out',\n    marginTop: 20\n};\n\nconst activeStyle = {\n    borderColor: '#2196f3'\n};\n\nconst chipStyle = {\n    marginTop: '10px',\n    marginRight: '5px'\n}\n\nconst acceptStyle = {\n    borderColor: '#00e676'\n};\n\nconst rejectStyle = {\n    borderColor: '#ff1744'\n};\n\nexport default function FileDropper(props) {\n\n    const firebase = props.firebase;\n    const user = props.user;\n    const [files, setFiles] = useState({})\n\n    const onDrop = useCallback((acceptedFiles) => {\n        acceptedFiles.forEach((file) => {\n            \n            const reader = new FileReader()\n            reader.onabort = () => console.log('file reading was aborted')\n            reader.onerror = () => console.log('file reading has failed')\n            reader.onload = () => {\n                // Do whatever you want with the file contents\n                const binaryStr = reader.result\n                console.log(binaryStr)\n            }\n            reader.readAsArrayBuffer(file)\n            firebase.upload_file(file, user).then(function(snapshot){\n                var files_object = files\n                files_obejct[file.name] = snapshot.metadata\n                setFiles(files_object)\n                console.log(files_object)\n            })\n        })\n    }, [])\n\n    const {\n        getRootProps,\n        getInputProps,\n        isDragActive,\n        isDragAccept,\n        isDragReject\n    } = useDropzone({accept: '.zip', onDrop});\n\n    const FileChips = () => {\n        var chips = []\n        files.forEach((file) => {\n            chips.push(<Chip variant='outlined' style={chipStyle} key={file.name} label={file.name.split('.').slice(0, -1).join('.')} color='primary'></Chip>)\n        })\n        return (\n            <div>\n                {chips}\n                <Button variant='contained' color='primary' onClick={build_classifier}></Button>\n            </div>\n        )\n    }\n\n    const style = useMemo(() => ({\n        ...baseStyle,\n        ...(isDragActive ? activeStyle : {}),\n        ...(isDragAccept ? acceptStyle : {}),\n        ...(isDragReject ? rejectStyle : {})\n    }), [\n        isDragActive,\n        isDragReject\n    ]);\n\n    return (\n        <div className=\"container\">\n            <div {...getRootProps({ style })}>\n                <input {...getInputProps()} />\n                <p>Drop your .zip file here or click to select a file to upload</p>\n            </div>\n            <FileChips />\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}