{"ast":null,"code":"import app from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/database';\nimport 'firebase/storage';\nimport { v4 as uuidv4 } from 'uuid';\nconst firebaseConfig = {\n  apiKey: \"AIzaSyAI6jdiSr92SVzXL0AwGKgdl9vf1n6O3xE\",\n  authDomain: \"astrumdashboard.firebaseapp.com\",\n  databaseURL: \"https://astrumdashboard.firebaseio.com\",\n  projectId: \"astrumdashboard\",\n  storageBucket: \"astrumdashboard.appspot.com\",\n  messagingSenderId: \"454472899112\",\n  appId: \"1:454472899112:web:4682681794e9e7de5c331d\",\n  measurementId: \"G-KS2TFQMTZJ\"\n};\n\nclass Firebase {\n  constructor() {\n    this.createAccount = (email, password) => {\n      return this.auth.createUserWithEmailAndPassword(email, password);\n    };\n\n    this.signIn = (email, password) => {\n      return this.auth.signInWithEmailAndPassword(email, password);\n    };\n\n    this.signOut = () => {\n      return this.auth.signOut();\n    };\n\n    this.setListenerOnUserData = user => {\n      return this.db.ref(`/`);\n    };\n\n    this.loadData = (user, callbk) => {\n      const self = this;\n      this.db.ref(`/users/${user.uid}/jobs`).once('value', function (snapshot) {\n        const jobs = snapshot.val();\n        var promises = [];\n        jobs.forEach(index => {\n          const job = jobs[index];\n          promises.push(self.db.ref('/jobs/' + job).once('value'));\n        });\n        Promise.all(promises).then(function (snapshots) {\n          snapshots.forEach(index => {\n            console.log(snapshots[index]);\n          });\n        });\n      });\n    };\n\n    this.listenForData = (user, callbk) => {\n      const self = this;\n      this.db.ref(`/users/${user.uid}/jobs`).on('child_added', function (snapshot) {\n        const job = snapshot.val();\n        self.db.ref('/jobs/' + job).on('value', function (childSnapshot) {\n          const data = childSnapshot.val();\n          callbk(job, data);\n        });\n      });\n    };\n\n    this.upload_file = function (file, user) {\n      const fileName = file.name.split('.').slice(0, -1).join('.');\n      const metadata = {\n        class_name: fileName,\n        uploaded_by: user.uid,\n        uploaded_at: Math.floor(new Date() / 1000)\n      };\n      return this.storage.ref(`datasets`).child(`${uuidv4()}$${fileName}$`).put(file, metadata);\n    };\n\n    app.initializeApp(firebaseConfig);\n    this.auth = app.auth();\n    this.db = app.database();\n    this.storage = app.storage();\n  }\n\n}\n\nexport default Firebase;","map":{"version":3,"sources":["/home/srikanth/Documents/astrum_dashboard/src/components/Firebase/firebase.js"],"names":["app","v4","uuidv4","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Firebase","constructor","createAccount","email","password","auth","createUserWithEmailAndPassword","signIn","signInWithEmailAndPassword","signOut","setListenerOnUserData","user","db","ref","loadData","callbk","self","uid","once","snapshot","jobs","val","promises","forEach","index","job","push","Promise","all","then","snapshots","console","log","listenForData","on","childSnapshot","data","upload_file","file","fileName","name","split","slice","join","metadata","class_name","uploaded_by","uploaded_at","Math","floor","Date","storage","child","put","initializeApp","database"],"mappings":"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","sourcesContent":["import app from 'firebase/app'\nimport 'firebase/auth'\nimport 'firebase/database'\nimport 'firebase/storage'\nimport { v4 as uuidv4 } from 'uuid';\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyAI6jdiSr92SVzXL0AwGKgdl9vf1n6O3xE\",\n    authDomain: \"astrumdashboard.firebaseapp.com\",\n    databaseURL: \"https://astrumdashboard.firebaseio.com\",\n    projectId: \"astrumdashboard\",\n    storageBucket: \"astrumdashboard.appspot.com\",\n    messagingSenderId: \"454472899112\",\n    appId: \"1:454472899112:web:4682681794e9e7de5c331d\",\n    measurementId: \"G-KS2TFQMTZJ\"\n};\n\nclass Firebase{\n\n    constructor(){\n        app.initializeApp(firebaseConfig);\n        this.auth = app.auth()\n        this.db = app.database()\n        this.storage = app.storage()\n    }\n\n    createAccount = (email, password) => {\n        return this.auth.createUserWithEmailAndPassword(email, password)\n    }\n\n    signIn = (email, password) => {\n        return this.auth.signInWithEmailAndPassword(email, password)\n    }\n\n    signOut = () => {\n        return this.auth.signOut()\n    }\n\n    setListenerOnUserData = (user) => {\n        return this.db.ref(`/`)\n    }\n\n    loadData = (user, callbk) => {\n        const self = this\n        this.db.ref(`/users/${user.uid}/jobs`).once('value', function(snapshot){\n            const jobs = snapshot.val()\n            var promises = []\n            jobs.forEach(index => {\n                const job = jobs[index]\n                promises.push(self.db.ref('/jobs/'+job).once('value'))\n            });\n            Promise.all(promises).then(function(snapshots){\n                snapshots.forEach(index => {\n                    console.log(snapshots[index])\n                })\n            })\n        })\n    }\n\n    listenForData = (user, callbk) => {\n        const self = this\n        this.db.ref(`/users/${user.uid}/jobs`).on('child_added', function(snapshot){\n            const job = snapshot.val()\n            self.db.ref('/jobs/'+job).on('value', function(childSnapshot){\n                const data = childSnapshot.val()\n                callbk(job, data)\n            })\n        })\n    }\n\n    upload_file = function(file, user){\n        const fileName = file.name.split('.').slice(0, -1).join('.')\n        const metadata = {class_name: fileName, uploaded_by: user.uid, uploaded_at: Math.floor(new Date()/1000)}\n        return this.storage.ref(`datasets`).child(`${uuidv4()}$${fileName}$`).put(file, metadata)\n    }\n}\n\nexport default Firebase;"]},"metadata":{},"sourceType":"module"}